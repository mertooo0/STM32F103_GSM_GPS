
STM32F103C8T6_GSM_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea4  08002ea4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ea4  08002ea4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ea4  08002ea4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000000c  08002eb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08002eb8  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2c5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d44  00000000  00000000  0002c33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000982  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b14  00000000  00000000  0002f62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1ac  00000000  00000000  0004713e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089fa9  00000000  00000000  000562ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000326c  00000000  00000000  000e0294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e3500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e60 	.word	0x08002e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e60 	.word	0x08002e60

0800014c <Set_Time>:
};

// ----------------------------------------------

void Set_Time()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	GGA_Str.hh = ((GPGGA_Data[7]-'0')*10+(uint8_t)GPGGA_Data[8]-'0')+3; //GMT +3
 8000150:	4b1b      	ldr	r3, [pc, #108]	; (80001c0 <Set_Time+0x74>)
 8000152:	79db      	ldrb	r3, [r3, #7]
 8000154:	3b30      	subs	r3, #48	; 0x30
 8000156:	b2db      	uxtb	r3, r3
 8000158:	461a      	mov	r2, r3
 800015a:	0092      	lsls	r2, r2, #2
 800015c:	4413      	add	r3, r2
 800015e:	005b      	lsls	r3, r3, #1
 8000160:	b2da      	uxtb	r2, r3
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <Set_Time+0x74>)
 8000164:	7a1b      	ldrb	r3, [r3, #8]
 8000166:	4413      	add	r3, r2
 8000168:	b2db      	uxtb	r3, r3
 800016a:	3b2d      	subs	r3, #45	; 0x2d
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b15      	ldr	r3, [pc, #84]	; (80001c4 <Set_Time+0x78>)
 8000170:	701a      	strb	r2, [r3, #0]
	GGA_Str.mm = (GPGGA_Data[9]-'0')*10+(uint8_t)GPGGA_Data[10]-'0';
 8000172:	4b13      	ldr	r3, [pc, #76]	; (80001c0 <Set_Time+0x74>)
 8000174:	7a5b      	ldrb	r3, [r3, #9]
 8000176:	3b30      	subs	r3, #48	; 0x30
 8000178:	b2db      	uxtb	r3, r3
 800017a:	461a      	mov	r2, r3
 800017c:	0092      	lsls	r2, r2, #2
 800017e:	4413      	add	r3, r2
 8000180:	005b      	lsls	r3, r3, #1
 8000182:	b2da      	uxtb	r2, r3
 8000184:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <Set_Time+0x74>)
 8000186:	7a9b      	ldrb	r3, [r3, #10]
 8000188:	4413      	add	r3, r2
 800018a:	b2db      	uxtb	r3, r3
 800018c:	3b30      	subs	r3, #48	; 0x30
 800018e:	b2da      	uxtb	r2, r3
 8000190:	4b0c      	ldr	r3, [pc, #48]	; (80001c4 <Set_Time+0x78>)
 8000192:	705a      	strb	r2, [r3, #1]
	GGA_Str.ss = (GPGGA_Data[11]-'0')*10+(uint8_t)GPGGA_Data[12]-'0';
 8000194:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <Set_Time+0x74>)
 8000196:	7adb      	ldrb	r3, [r3, #11]
 8000198:	3b30      	subs	r3, #48	; 0x30
 800019a:	b2db      	uxtb	r3, r3
 800019c:	461a      	mov	r2, r3
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	4413      	add	r3, r2
 80001a2:	005b      	lsls	r3, r3, #1
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <Set_Time+0x74>)
 80001a8:	7b1b      	ldrb	r3, [r3, #12]
 80001aa:	4413      	add	r3, r2
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	3b30      	subs	r3, #48	; 0x30
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <Set_Time+0x78>)
 80001b4:	709a      	strb	r2, [r3, #2]
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	20000028 	.word	0x20000028

080001c8 <Get_RMC>:

void Get_RMC()//Recommended Minimum Navigation Information
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
 80001cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001d4:	4906      	ldr	r1, [pc, #24]	; (80001f0 <Get_RMC+0x28>)
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <Get_RMC+0x2c>)
 80001d8:	f002 f834 	bl	8002244 <HAL_UART_Receive>
	Reorder_data(Sp_finder(GPRMC),GPRMC);
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 f823 	bl	8000228 <Sp_finder>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f8ac 	bl	8000344 <Reorder_data>

}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	200001dc 	.word	0x200001dc
 80001f4:	20000194 	.word	0x20000194

080001f8 <Get_GGA>:

void Get_GGA()//GLOBAL POSITIONING SYSTEM FIX DATA
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000204:	4906      	ldr	r1, [pc, #24]	; (8000220 <Get_GGA+0x28>)
 8000206:	4807      	ldr	r0, [pc, #28]	; (8000224 <Get_GGA+0x2c>)
 8000208:	f002 f81c 	bl	8002244 <HAL_UART_Receive>
	Reorder_data(Sp_finder(GPGGA),GPGGA);
 800020c:	2002      	movs	r0, #2
 800020e:	f000 f80b 	bl	8000228 <Sp_finder>
 8000212:	4603      	mov	r3, r0
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f894 	bl	8000344 <Reorder_data>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200001dc 	.word	0x200001dc
 8000224:	20000194 	.word	0x20000194

08000228 <Sp_finder>:

uint16_t Sp_finder(uint8_t s_case)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	switch(s_case)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b05      	cmp	r3, #5
 8000236:	d87b      	bhi.n	8000330 <Sp_finder+0x108>
 8000238:	a201      	add	r2, pc, #4	; (adr r2, 8000240 <Sp_finder+0x18>)
 800023a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023e:	bf00      	nop
 8000240:	08000259 	.word	0x08000259
 8000244:	08000331 	.word	0x08000331
 8000248:	080002c5 	.word	0x080002c5
 800024c:	08000331 	.word	0x08000331
 8000250:	08000331 	.word	0x08000331
 8000254:	08000331 	.word	0x08000331
	{

		case 0:  //GPRMC
			for(int i=0;i<500;i++)
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	e02d      	b.n	80002ba <Sp_finder+0x92>
			{
				if(Buffer[i]== '$')
 800025e:	4a37      	ldr	r2, [pc, #220]	; (800033c <Sp_finder+0x114>)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4413      	add	r3, r2
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b24      	cmp	r3, #36	; 0x24
 8000268:	d124      	bne.n	80002b4 <Sp_finder+0x8c>
				{
					if(Buffer[i+1]== 'G')
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	4a33      	ldr	r2, [pc, #204]	; (800033c <Sp_finder+0x114>)
 8000270:	5cd3      	ldrb	r3, [r2, r3]
 8000272:	2b47      	cmp	r3, #71	; 0x47
 8000274:	d11e      	bne.n	80002b4 <Sp_finder+0x8c>
					{
						if(Buffer[i+2]== 'P')
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3302      	adds	r3, #2
 800027a:	4a30      	ldr	r2, [pc, #192]	; (800033c <Sp_finder+0x114>)
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	2b50      	cmp	r3, #80	; 0x50
 8000280:	d118      	bne.n	80002b4 <Sp_finder+0x8c>
						{
							if(Buffer[i+3]== 'R')
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3303      	adds	r3, #3
 8000286:	4a2d      	ldr	r2, [pc, #180]	; (800033c <Sp_finder+0x114>)
 8000288:	5cd3      	ldrb	r3, [r2, r3]
 800028a:	2b52      	cmp	r3, #82	; 0x52
 800028c:	d112      	bne.n	80002b4 <Sp_finder+0x8c>
							{
								if(Buffer[i+4]== 'M')
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3304      	adds	r3, #4
 8000292:	4a2a      	ldr	r2, [pc, #168]	; (800033c <Sp_finder+0x114>)
 8000294:	5cd3      	ldrb	r3, [r2, r3]
 8000296:	2b4d      	cmp	r3, #77	; 0x4d
 8000298:	d10c      	bne.n	80002b4 <Sp_finder+0x8c>
								{
									if(Buffer[i+5]== 'C')
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	3305      	adds	r3, #5
 800029e:	4a27      	ldr	r2, [pc, #156]	; (800033c <Sp_finder+0x114>)
 80002a0:	5cd3      	ldrb	r3, [r2, r3]
 80002a2:	2b43      	cmp	r3, #67	; 0x43
 80002a4:	d106      	bne.n	80002b4 <Sp_finder+0x8c>
									{
										Strting_point=i;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	b29a      	uxth	r2, r3
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <Sp_finder+0x118>)
 80002ac:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	e03e      	b.n	8000332 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	3301      	adds	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002c0:	dbcd      	blt.n	800025e <Sp_finder+0x36>
							}
						}
					}
				}
			}
			break;
 80002c2:	e036      	b.n	8000332 <Sp_finder+0x10a>

			return;
			break;

		case 2://GPGGA
			for(int i=0;i<500;i++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	e02d      	b.n	8000326 <Sp_finder+0xfe>
			{
				if(Buffer[i]== '$')
 80002ca:	4a1c      	ldr	r2, [pc, #112]	; (800033c <Sp_finder+0x114>)
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	4413      	add	r3, r2
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b24      	cmp	r3, #36	; 0x24
 80002d4:	d124      	bne.n	8000320 <Sp_finder+0xf8>
				{
					if(Buffer[i+1]== 'G')
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	3301      	adds	r3, #1
 80002da:	4a18      	ldr	r2, [pc, #96]	; (800033c <Sp_finder+0x114>)
 80002dc:	5cd3      	ldrb	r3, [r2, r3]
 80002de:	2b47      	cmp	r3, #71	; 0x47
 80002e0:	d11e      	bne.n	8000320 <Sp_finder+0xf8>
					{
						if(Buffer[i+2]== 'P')
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	3302      	adds	r3, #2
 80002e6:	4a15      	ldr	r2, [pc, #84]	; (800033c <Sp_finder+0x114>)
 80002e8:	5cd3      	ldrb	r3, [r2, r3]
 80002ea:	2b50      	cmp	r3, #80	; 0x50
 80002ec:	d118      	bne.n	8000320 <Sp_finder+0xf8>
						{
							if(Buffer[i+3]== 'G')
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	3303      	adds	r3, #3
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <Sp_finder+0x114>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	2b47      	cmp	r3, #71	; 0x47
 80002f8:	d112      	bne.n	8000320 <Sp_finder+0xf8>
							{
								if(Buffer[i+4]== 'G')
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	3304      	adds	r3, #4
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <Sp_finder+0x114>)
 8000300:	5cd3      	ldrb	r3, [r2, r3]
 8000302:	2b47      	cmp	r3, #71	; 0x47
 8000304:	d10c      	bne.n	8000320 <Sp_finder+0xf8>
								{
									if(Buffer[i+5]== 'A')
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	3305      	adds	r3, #5
 800030a:	4a0c      	ldr	r2, [pc, #48]	; (800033c <Sp_finder+0x114>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	2b41      	cmp	r3, #65	; 0x41
 8000310:	d106      	bne.n	8000320 <Sp_finder+0xf8>
									{
										Strting_point=i;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	b29a      	uxth	r2, r3
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <Sp_finder+0x118>)
 8000318:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	b29b      	uxth	r3, r3
 800031e:	e008      	b.n	8000332 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	3301      	adds	r3, #1
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800032c:	dbcd      	blt.n	80002ca <Sp_finder+0xa2>
							}
						}
					}
				}
			}
			return;
 800032e:	e000      	b.n	8000332 <Sp_finder+0x10a>

			return;
			break;

		default:
			return;
 8000330:	bf00      	nop
			break;

	}

}
 8000332:	4618      	mov	r0, r3
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	200001dc 	.word	0x200001dc
 8000340:	20000100 	.word	0x20000100

08000344 <Reorder_data>:

void Reorder_data(uint16_t sp,uint8_t s_case)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	460a      	mov	r2, r1
 800034e:	80fb      	strh	r3, [r7, #6]
 8000350:	4613      	mov	r3, r2
 8000352:	717b      	strb	r3, [r7, #5]
	uint16_t syc=0;
 8000354:	2300      	movs	r3, #0
 8000356:	81fb      	strh	r3, [r7, #14]
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8000358:	e027      	b.n	80003aa <Reorder_data+0x66>
	{

		syc++;
 800035a:	89fb      	ldrh	r3, [r7, #14]
 800035c:	3301      	adds	r3, #1
 800035e:	81fb      	strh	r3, [r7, #14]
		sp++;
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	3301      	adds	r3, #1
 8000364:	80fb      	strh	r3, [r7, #6]

		switch(s_case)
 8000366:	797b      	ldrb	r3, [r7, #5]
 8000368:	2b05      	cmp	r3, #5
 800036a:	d81d      	bhi.n	80003a8 <Reorder_data+0x64>
 800036c:	a201      	add	r2, pc, #4	; (adr r2, 8000374 <Reorder_data+0x30>)
 800036e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000372:	bf00      	nop
 8000374:	0800038d 	.word	0x0800038d
 8000378:	080003ab 	.word	0x080003ab
 800037c:	0800039b 	.word	0x0800039b
 8000380:	080003ab 	.word	0x080003ab
 8000384:	080003ab 	.word	0x080003ab
 8000388:	080003ab 	.word	0x080003ab
		{

			case 0:
				GPRMC_Data[syc]=Buffer[sp];
 800038c:	88fa      	ldrh	r2, [r7, #6]
 800038e:	89fb      	ldrh	r3, [r7, #14]
 8000390:	490e      	ldr	r1, [pc, #56]	; (80003cc <Reorder_data+0x88>)
 8000392:	5c89      	ldrb	r1, [r1, r2]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <Reorder_data+0x8c>)
 8000396:	54d1      	strb	r1, [r2, r3]
				break;
 8000398:	e007      	b.n	80003aa <Reorder_data+0x66>


				break;

			case 2:
				GPGGA_Data[syc]=Buffer[sp];
 800039a:	88fa      	ldrh	r2, [r7, #6]
 800039c:	89fb      	ldrh	r3, [r7, #14]
 800039e:	490b      	ldr	r1, [pc, #44]	; (80003cc <Reorder_data+0x88>)
 80003a0:	5c89      	ldrb	r1, [r1, r2]
 80003a2:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <Reorder_data+0x90>)
 80003a4:	54d1      	strb	r1, [r2, r3]

				break;
 80003a6:	e000      	b.n	80003aa <Reorder_data+0x66>

				break;

			default:

				break;
 80003a8:	bf00      	nop
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 80003aa:	89fb      	ldrh	r3, [r7, #14]
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <Reorder_data+0x88>)
 80003ae:	5cd3      	ldrb	r3, [r2, r3]
 80003b0:	2b0d      	cmp	r3, #13
 80003b2:	d005      	beq.n	80003c0 <Reorder_data+0x7c>
 80003b4:	89fb      	ldrh	r3, [r7, #14]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <Reorder_data+0x88>)
 80003ba:	5cd3      	ldrb	r3, [r2, r3]
 80003bc:	2b0a      	cmp	r3, #10
 80003be:	d1cc      	bne.n	800035a <Reorder_data+0x16>

		}

	}
}
 80003c0:	bf00      	nop
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	200001dc 	.word	0x200001dc
 80003d0:	20000038 	.word	0x20000038
 80003d4:	2000009c 	.word	0x2000009c

080003d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	//if(htim->Instance == htim1.Instance)
	if(htim == &htim1)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a07      	ldr	r2, [pc, #28]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 80003e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80003ee:	f000 feb1 	bl	8001154 <HAL_GPIO_TogglePin>
		Set_Time();
 80003f2:	f7ff feab 	bl	800014c <Set_Time>
	}
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000104 	.word	0x20000104
 8000404:	40011000 	.word	0x40011000

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040c:	f000 fac0 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000410:	f000 f81e 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000414:	f000 f8fc 	bl	8000610 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000418:	f000 f8a6 	bl	8000568 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800041c:	f000 f8ce 	bl	80005bc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000420:	f000 f850 	bl	80004c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim1);
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <main+0x40>)
 8000426:	f001 fb0f 	bl	8001a48 <HAL_TIM_Base_Start_IT>

  memset(Data,0,100);
 800042a:	2264      	movs	r2, #100	; 0x64
 800042c:	2100      	movs	r1, #0
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <main+0x44>)
 8000430:	f002 fcea 	bl	8002e08 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8000434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000438:	f000 fb0c 	bl	8000a54 <HAL_Delay>
	  //HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);

	  Get_GGA();
 800043c:	f7ff fedc 	bl	80001f8 <Get_GGA>
	  Get_RMC();
 8000440:	f7ff fec2 	bl	80001c8 <Get_RMC>
	  HAL_Delay(1000);
 8000444:	e7f6      	b.n	8000434 <main+0x2c>
 8000446:	bf00      	nop
 8000448:	20000104 	.word	0x20000104
 800044c:	200003d0 	.word	0x200003d0

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b090      	sub	sp, #64	; 0x40
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0318 	add.w	r3, r7, #24
 800045a:	2228      	movs	r2, #40	; 0x28
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f002 fcd2 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047c:	2300      	movs	r3, #0
 800047e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0318 	add.w	r3, r7, #24
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fe7f 	bl	8001188 <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000490:	f000 f92c 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000498:	2301      	movs	r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f8ed 	bl	800168c <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80004b8:	f000 f918 	bl	80006ec <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3740      	adds	r7, #64	; 0x40
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_TIM1_Init+0x9c>)
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <MX_TIM1_Init+0xa0>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_TIM1_Init+0x9c>)
 80004e8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_TIM1_Init+0x9c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_TIM1_Init+0x9c>)
 80004f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_TIM1_Init+0x9c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_TIM1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_TIM1_Init+0x9c>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <MX_TIM1_Init+0x9c>)
 8000510:	f001 fa4a 	bl	80019a8 <HAL_TIM_Base_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800051a:	f000 f8e7 	bl	80006ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4619      	mov	r1, r3
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_TIM1_Init+0x9c>)
 800052c:	f001 fbe6 	bl	8001cfc <HAL_TIM_ConfigClockSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000536:	f000 f8d9 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000542:	463b      	mov	r3, r7
 8000544:	4619      	mov	r1, r3
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_TIM1_Init+0x9c>)
 8000548:	f001 fdbc 	bl	80020c4 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000552:	f000 f8cb 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000104 	.word	0x20000104
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_USART1_UART_Init+0x50>)
 8000570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000574:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_USART1_UART_Init+0x4c>)
 80005a0:	f001 fe00 	bl	80021a4 <HAL_UART_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005aa:	f000 f89f 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000014c 	.word	0x2000014c
 80005b8:	40013800 	.word	0x40013800

080005bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART2_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART2_UART_Init+0x4c>)
 80005f4:	f001 fdd6 	bl	80021a4 <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f875 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000194 	.word	0x20000194
 800060c:	40004400 	.word	0x40004400

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800062a:	f043 0310 	orr.w	r3, r3, #16
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000642:	f043 0320 	orr.w	r3, r3, #32
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0320 	and.w	r3, r3, #32
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800065a:	f043 0304 	orr.w	r3, r3, #4
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0304 	and.w	r3, r3, #4
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_GPIO_Init+0xd0>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_GPIO_Init+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <MX_GPIO_Init+0xd4>)
 800068c:	f000 fd4a 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <MX_GPIO_Init+0xd8>)
 8000698:	f000 fd44 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0xd4>)
 80006b6:	f000 fbb1 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 80006ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0xd8>)
 80006d4:	f000 fba2 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40010c00 	.word	0x40010c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <HAL_TIM_Base_MspInit+0x44>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d113      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_TIM_Base_MspInit+0x48>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <HAL_TIM_Base_MspInit+0x48>)
 8000774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_TIM_Base_MspInit+0x48>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2019      	movs	r0, #25
 800078c:	f000 fa5d 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000790:	2019      	movs	r0, #25
 8000792:	f000 fa76 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012c00 	.word	0x40012c00
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <HAL_UART_MspInit+0x108>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d13a      	bne.n	800083e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c8:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a39      	ldr	r2, [pc, #228]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b37      	ldr	r3, [pc, #220]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4619      	mov	r1, r3
 800080c:	482a      	ldr	r0, [pc, #168]	; (80008b8 <HAL_UART_MspInit+0x110>)
 800080e:	f000 fb05 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4619      	mov	r1, r3
 8000826:	4824      	ldr	r0, [pc, #144]	; (80008b8 <HAL_UART_MspInit+0x110>)
 8000828:	f000 faf8 	bl	8000e1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 fa0a 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000836:	2025      	movs	r0, #37	; 0x25
 8000838:	f000 fa23 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083c:	e034      	b.n	80008a8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <HAL_UART_MspInit+0x114>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d12f      	bne.n	80008a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x10c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	2304      	movs	r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0318 	add.w	r3, r7, #24
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_UART_MspInit+0x110>)
 800088c:	f000 fac6 	bl	8000e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000890:	2308      	movs	r3, #8
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0x110>)
 80008a4:	f000 faba 	bl	8000e1c <HAL_GPIO_Init>
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40013800 	.word	0x40013800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40004400 	.word	0x40004400

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f889 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM1_UP_IRQHandler+0x10>)
 8000916:	f001 f8e9 	bl	8001aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000104 	.word	0x20000104

08000924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USART1_IRQHandler+0x10>)
 800092a:	f001 fd1d 	bl	8002368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000014c 	.word	0x2000014c

08000938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000944:	f7ff fff8 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094a:	490c      	ldr	r1, [pc, #48]	; (800097c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000960:	4c09      	ldr	r4, [pc, #36]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096e:	f002 fa53 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fd49 	bl	8000408 <main>
  bx lr
 8000976:	4770      	bx	lr
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000980:	08002eac 	.word	0x08002eac
  ldr r2, =_sbss
 8000984:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000988:	20000438 	.word	0x20000438

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f947 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fea4 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f95f 	bl	8000c9e <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f927 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000434 	.word	0x20000434

08000a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000434 	.word	0x20000434

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fff0 	bl	8000a40 <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffe0 	bl	8000a40 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4906      	ldr	r1, [pc, #24]	; (8000b34 <__NVIC_EnableIRQ+0x34>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff90 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff2d 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff42 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff90 	bl	8000b8c <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5f 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff35 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d008      	beq.n	8000ce0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e020      	b.n	8000d22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d005      	beq.n	8000d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2204      	movs	r2, #4
 8000d48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e051      	b.n	8000df4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 020e 	bic.w	r2, r2, #14
 8000d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_DMA_Abort_IT+0xd4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d029      	beq.n	8000dce <HAL_DMA_Abort_IT+0xa2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_DMA_Abort_IT+0xd8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d022      	beq.n	8000dca <HAL_DMA_Abort_IT+0x9e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <HAL_DMA_Abort_IT+0xdc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01a      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0x98>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_DMA_Abort_IT+0xe0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d012      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x92>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <HAL_DMA_Abort_IT+0xe4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00a      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x8c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <HAL_DMA_Abort_IT+0xe8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d102      	bne.n	8000db2 <HAL_DMA_Abort_IT+0x86>
 8000dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000db0:	e00e      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db6:	e00b      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dbc:	e008      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	e005      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc8:	e002      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000dca:	2310      	movs	r3, #16
 8000dcc:	e000      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xa4>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <HAL_DMA_Abort_IT+0xec>)
 8000dd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	4798      	blx	r3
    } 
  }
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40020008 	.word	0x40020008
 8000e04:	4002001c 	.word	0x4002001c
 8000e08:	40020030 	.word	0x40020030
 8000e0c:	40020044 	.word	0x40020044
 8000e10:	40020058 	.word	0x40020058
 8000e14:	4002006c 	.word	0x4002006c
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b08b      	sub	sp, #44	; 0x2c
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e169      	b.n	8001104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e30:	2201      	movs	r2, #1
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8158 	bne.w	80010fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4a9a      	ldr	r2, [pc, #616]	; (80010bc <HAL_GPIO_Init+0x2a0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d05e      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e58:	4a98      	ldr	r2, [pc, #608]	; (80010bc <HAL_GPIO_Init+0x2a0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d875      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e5e:	4a98      	ldr	r2, [pc, #608]	; (80010c0 <HAL_GPIO_Init+0x2a4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d058      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e64:	4a96      	ldr	r2, [pc, #600]	; (80010c0 <HAL_GPIO_Init+0x2a4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d86f      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e6a:	4a96      	ldr	r2, [pc, #600]	; (80010c4 <HAL_GPIO_Init+0x2a8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d052      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e70:	4a94      	ldr	r2, [pc, #592]	; (80010c4 <HAL_GPIO_Init+0x2a8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d869      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e76:	4a94      	ldr	r2, [pc, #592]	; (80010c8 <HAL_GPIO_Init+0x2ac>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d04c      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a92      	ldr	r2, [pc, #584]	; (80010c8 <HAL_GPIO_Init+0x2ac>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d863      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e82:	4a92      	ldr	r2, [pc, #584]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d046      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
 8000e88:	4a90      	ldr	r2, [pc, #576]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d85d      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d82a      	bhi.n	8000ee8 <HAL_GPIO_Init+0xcc>
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d859      	bhi.n	8000f4a <HAL_GPIO_Init+0x12e>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <HAL_GPIO_Init+0x80>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000f17 	.word	0x08000f17
 8000ea0:	08000ef1 	.word	0x08000ef1
 8000ea4:	08000f03 	.word	0x08000f03
 8000ea8:	08000f45 	.word	0x08000f45
 8000eac:	08000f4b 	.word	0x08000f4b
 8000eb0:	08000f4b 	.word	0x08000f4b
 8000eb4:	08000f4b 	.word	0x08000f4b
 8000eb8:	08000f4b 	.word	0x08000f4b
 8000ebc:	08000f4b 	.word	0x08000f4b
 8000ec0:	08000f4b 	.word	0x08000f4b
 8000ec4:	08000f4b 	.word	0x08000f4b
 8000ec8:	08000f4b 	.word	0x08000f4b
 8000ecc:	08000f4b 	.word	0x08000f4b
 8000ed0:	08000f4b 	.word	0x08000f4b
 8000ed4:	08000f4b 	.word	0x08000f4b
 8000ed8:	08000f4b 	.word	0x08000f4b
 8000edc:	08000f4b 	.word	0x08000f4b
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000f0d 	.word	0x08000f0d
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <HAL_GPIO_Init+0x2b4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eee:	e02c      	b.n	8000f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e029      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	3304      	adds	r3, #4
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e024      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	3308      	adds	r3, #8
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e01f      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	330c      	adds	r3, #12
 8000f12:	623b      	str	r3, [r7, #32]
          break;
 8000f14:	e01a      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e013      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d105      	bne.n	8000f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	611a      	str	r2, [r3, #16]
          break;
 8000f36:	e009      	b.n	8000f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	615a      	str	r2, [r3, #20]
          break;
 8000f42:	e003      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
          break;
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x130>
          break;
 8000f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d801      	bhi.n	8000f56 <HAL_GPIO_Init+0x13a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	e001      	b.n	8000f5a <HAL_GPIO_Init+0x13e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d802      	bhi.n	8000f68 <HAL_GPIO_Init+0x14c>
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x152>
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	3b08      	subs	r3, #8
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	210f      	movs	r1, #15
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	6a39      	ldr	r1, [r7, #32]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80b1 	beq.w	80010fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x2b8>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <HAL_GPIO_Init+0x2b8>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb4:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_GPIO_Init+0x2bc>)
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <HAL_GPIO_Init+0x2c0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d013      	beq.n	8001008 <HAL_GPIO_Init+0x1ec>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <HAL_GPIO_Init+0x2c4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d00d      	beq.n	8001004 <HAL_GPIO_Init+0x1e8>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <HAL_GPIO_Init+0x2c8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d007      	beq.n	8001000 <HAL_GPIO_Init+0x1e4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <HAL_GPIO_Init+0x2cc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_GPIO_Init+0x1e0>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_Init+0x1ee>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e004      	b.n	800100a <HAL_GPIO_Init+0x1ee>
 8001000:	2302      	movs	r3, #2
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0x1ee>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_GPIO_Init+0x1ee>
 8001008:	2300      	movs	r3, #0
 800100a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4093      	lsls	r3, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800101a:	492f      	ldr	r1, [pc, #188]	; (80010d8 <HAL_GPIO_Init+0x2bc>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	492c      	ldr	r1, [pc, #176]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4928      	ldr	r1, [pc, #160]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	43db      	mvns	r3, r3
 8001072:	491e      	ldr	r1, [pc, #120]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001074:	4013      	ands	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4918      	ldr	r1, [pc, #96]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	4914      	ldr	r1, [pc, #80]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 800109c:	4013      	ands	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d021      	beq.n	80010f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	490e      	ldr	r1, [pc, #56]	; (80010ec <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e021      	b.n	80010fe <HAL_GPIO_Init+0x2e2>
 80010ba:	bf00      	nop
 80010bc:	10320000 	.word	0x10320000
 80010c0:	10310000 	.word	0x10310000
 80010c4:	10220000 	.word	0x10220000
 80010c8:	10210000 	.word	0x10210000
 80010cc:	10120000 	.word	0x10120000
 80010d0:	10110000 	.word	0x10110000
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010000 	.word	0x40010000
 80010dc:	40010800 	.word	0x40010800
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40011400 	.word	0x40011400
 80010ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_GPIO_Init+0x304>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4909      	ldr	r1, [pc, #36]	; (8001120 <HAL_GPIO_Init+0x304>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	3301      	adds	r3, #1
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	fa22 f303 	lsr.w	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	f47f ae8e 	bne.w	8000e30 <HAL_GPIO_Init+0x14>
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	372c      	adds	r7, #44	; 0x2c
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40010400 	.word	0x40010400

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43d9      	mvns	r1, r3
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	400b      	ands	r3, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	611a      	str	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e272      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8087 	beq.w	80012b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d00c      	beq.n	80011ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b4:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d112      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
 80011c0:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	d10b      	bne.n	80011e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ce:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d06c      	beq.n	80012b4 <HAL_RCC_OscConfig+0x12c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d168      	bne.n	80012b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e24c      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x76>
 80011f0:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a7f      	ldr	r2, [pc, #508]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e02e      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7a      	ldr	r2, [pc, #488]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a77      	ldr	r2, [pc, #476]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e01d      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001228:	d10c      	bne.n	8001244 <HAL_RCC_OscConfig+0xbc>
 800122a:	4b72      	ldr	r3, [pc, #456]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a71      	ldr	r2, [pc, #452]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e00b      	b.n	800125c <HAL_RCC_OscConfig+0xd4>
 8001244:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6a      	ldr	r2, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a67      	ldr	r2, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d013      	beq.n	800128c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fbec 	bl	8000a40 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fbe8 	bl	8000a40 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e200      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4b5d      	ldr	r3, [pc, #372]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0xe4>
 800128a:	e014      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fbd8 	bl	8000a40 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fbd4 	bl	8000a40 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1ec      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <HAL_RCC_OscConfig+0x10c>
 80012b2:	e000      	b.n	80012b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d063      	beq.n	800138a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d11c      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d005      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e1c0      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4939      	ldr	r1, [pc, #228]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	e03a      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <HAL_RCC_OscConfig+0x270>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fb8d 	bl	8000a40 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800132a:	f7ff fb89 	bl	8000a40 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1a1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	4927      	ldr	r1, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_RCC_OscConfig+0x270>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb6c 	bl	8000a40 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fb68 	bl	8000a40 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e180      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d03a      	beq.n	800140c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d019      	beq.n	80013d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_RCC_OscConfig+0x274>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fb4c 	bl	8000a40 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb48 	bl	8000a40 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e160      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 face 	bl	800196c <RCC_Delay>
 80013d0:	e01c      	b.n	800140c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_OscConfig+0x274>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fb32 	bl	8000a40 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013de:	e00f      	b.n	8001400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb2e 	bl	8000a40 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d908      	bls.n	8001400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e146      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	42420000 	.word	0x42420000
 80013fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	4b92      	ldr	r3, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e9      	bne.n	80013e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80a6 	beq.w	8001566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141e:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10d      	bne.n	8001446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a87      	ldr	r2, [pc, #540]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b82      	ldr	r3, [pc, #520]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001452:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7e      	ldr	r2, [pc, #504]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145e:	f7ff faef 	bl	8000a40 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001466:	f7ff faeb 	bl	8000a40 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e103      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b75      	ldr	r3, [pc, #468]	; (8001650 <HAL_RCC_OscConfig+0x4c8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x312>
 800148c:	4b6f      	ldr	r3, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	e02d      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x334>
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a66      	ldr	r2, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	e01c      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x356>
 80014c4:	4b61      	ldr	r3, [pc, #388]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a60      	ldr	r2, [pc, #384]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	4b5e      	ldr	r3, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x36e>
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a5a      	ldr	r2, [pc, #360]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6213      	str	r3, [r2, #32]
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa9f 	bl	8000a40 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fa9b 	bl	8000a40 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0b1      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ee      	beq.n	8001506 <HAL_RCC_OscConfig+0x37e>
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fa89 	bl	8000a40 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fa85 	bl	8000a40 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e09b      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4b40      	ldr	r3, [pc, #256]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d105      	bne.n	8001566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a3b      	ldr	r2, [pc, #236]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8087 	beq.w	800167e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d061      	beq.n	8001640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d146      	bne.n	8001612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fa59 	bl	8000a40 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fa55 	bl	8000a40 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e06d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d108      	bne.n	80015cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4921      	ldr	r1, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a19      	ldr	r1, [r3, #32]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	430b      	orrs	r3, r1
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fa29 	bl	8000a40 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fa25 	bl	8000a40 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e03d      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x46a>
 8001610:	e035      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x4cc>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa12 	bl	8000a40 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fa0e 	bl	8000a40 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e026      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x4c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x498>
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e019      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
 800164c:	40021000 	.word	0x40021000
 8001650:	40007000 	.word	0x40007000
 8001654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x500>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	429a      	cmp	r2, r3
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0d0      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4965      	ldr	r1, [pc, #404]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0b8      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d020      	beq.n	800171e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a58      	ldr	r2, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800170a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	494d      	ldr	r1, [pc, #308]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d040      	beq.n	80017ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e07f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e073      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff f960 	bl	8000a40 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff f95c 	bl	8000a40 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e053      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 020c 	and.w	r2, r3, #12
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1eb      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d210      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 0207 	bic.w	r2, r3, #7
 80017c2:	4922      	ldr	r1, [pc, #136]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e032      	b.n	8001842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4916      	ldr	r1, [pc, #88]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d009      	beq.n	800181a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181a:	f000 f821 	bl	8001860 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	fa22 f303 	lsr.w	r3, r2, r3
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_ClockConfig+0x1cc>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f8be 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	08002e78 	.word	0x08002e78
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b04      	cmp	r3, #4
 8001888:	d002      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x30>
 800188a:	2b08      	cmp	r3, #8
 800188c:	d003      	beq.n	8001896 <HAL_RCC_GetSysClockFreq+0x36>
 800188e:	e027      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001892:	613b      	str	r3, [r7, #16]
      break;
 8001894:	e027      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	0c9b      	lsrs	r3, r3, #18
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	0c5b      	lsrs	r3, r3, #17
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018c2:	fb03 f202 	mul.w	r2, r3, r2
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e004      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018d4:	fb02 f303 	mul.w	r3, r2, r3
 80018d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	613b      	str	r3, [r7, #16]
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80018e2:	613b      	str	r3, [r7, #16]
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	693b      	ldr	r3, [r7, #16]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	007a1200 	.word	0x007a1200
 80018fc:	08002e90 	.word	0x08002e90
 8001900:	08002ea0 	.word	0x08002ea0
 8001904:	003d0900 	.word	0x003d0900

08001908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800190c:	4b02      	ldr	r3, [pc, #8]	; (8001918 <HAL_RCC_GetHCLKFreq+0x10>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000000 	.word	0x20000000

0800191c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001920:	f7ff fff2 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	08002e88 	.word	0x08002e88

08001944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001948:	f7ff ffde 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0adb      	lsrs	r3, r3, #11
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	08002e88 	.word	0x08002e88

0800196c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <RCC_Delay+0x34>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <RCC_Delay+0x38>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0a5b      	lsrs	r3, r3, #9
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001988:	bf00      	nop
  }
  while (Delay --);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f9      	bne.n	8001988 <RCC_Delay+0x1c>
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000000 	.word	0x20000000
 80019a4:	10624dd3 	.word	0x10624dd3

080019a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e041      	b.n	8001a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fec4 	bl	800075c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 fa74 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d001      	beq.n	8001a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e03a      	b.n	8001ad6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_TIM_Base_Start_IT+0x98>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x58>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8a:	d009      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x58>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_TIM_Base_Start_IT+0x58>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d111      	bne.n	8001ac4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d010      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac2:	e007      	b.n	8001ad4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40000800 	.word	0x40000800

08001aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d122      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d11b      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0202 	mvn.w	r2, #2
 8001b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f9b4 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001b34:	e005      	b.n	8001b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f9a7 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f9b6 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d122      	bne.n	8001b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d11b      	bne.n	8001b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0204 	mvn.w	r2, #4
 8001b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f98a 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001b88:	e005      	b.n	8001b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f97d 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f98c 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d122      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d11b      	bne.n	8001bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f06f 0208 	mvn.w	r2, #8
 8001bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f960 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e005      	b.n	8001bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f953 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f962 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d122      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	d11b      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0210 	mvn.w	r2, #16
 8001c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2208      	movs	r2, #8
 8001c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f936 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001c30:	e005      	b.n	8001c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f929 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f938 	bl	8001eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0201 	mvn.w	r2, #1
 8001c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe fbb4 	bl	80003d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b80      	cmp	r3, #128	; 0x80
 8001c7c:	d10e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c88:	2b80      	cmp	r3, #128	; 0x80
 8001c8a:	d107      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fa7b 	bl	8002192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8fc 	bl	8001ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0220 	mvn.w	r2, #32
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa46 	bl	8002180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_TIM_ConfigClockSource+0x1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0b4      	b.n	8001e82 <HAL_TIM_ConfigClockSource+0x186>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d50:	d03e      	beq.n	8001dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d56:	f200 8087 	bhi.w	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5e:	f000 8086 	beq.w	8001e6e <HAL_TIM_ConfigClockSource+0x172>
 8001d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d66:	d87f      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d68:	2b70      	cmp	r3, #112	; 0x70
 8001d6a:	d01a      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0xa6>
 8001d6c:	2b70      	cmp	r3, #112	; 0x70
 8001d6e:	d87b      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d70:	2b60      	cmp	r3, #96	; 0x60
 8001d72:	d050      	beq.n	8001e16 <HAL_TIM_ConfigClockSource+0x11a>
 8001d74:	2b60      	cmp	r3, #96	; 0x60
 8001d76:	d877      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d78:	2b50      	cmp	r3, #80	; 0x50
 8001d7a:	d03c      	beq.n	8001df6 <HAL_TIM_ConfigClockSource+0xfa>
 8001d7c:	2b50      	cmp	r3, #80	; 0x50
 8001d7e:	d873      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d80:	2b40      	cmp	r3, #64	; 0x40
 8001d82:	d058      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0x13a>
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d86f      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d88:	2b30      	cmp	r3, #48	; 0x30
 8001d8a:	d064      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0x15a>
 8001d8c:	2b30      	cmp	r3, #48	; 0x30
 8001d8e:	d86b      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d060      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0x15a>
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d867      	bhi.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05c      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0x15a>
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	d05a      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0x15a>
 8001da0:	e062      	b.n	8001e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001db2:	f000 f968 	bl	8002086 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	609a      	str	r2, [r3, #8]
      break;
 8001dce:	e04f      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001de0:	f000 f951 	bl	8002086 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001df2:	609a      	str	r2, [r3, #8]
      break;
 8001df4:	e03c      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e02:	461a      	mov	r2, r3
 8001e04:	f000 f8c8 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2150      	movs	r1, #80	; 0x50
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f91f 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e14:	e02c      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e22:	461a      	mov	r2, r3
 8001e24:	f000 f8e6 	bl	8001ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2160      	movs	r1, #96	; 0x60
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f90f 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e34:	e01c      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	461a      	mov	r2, r3
 8001e44:	f000 f8a8 	bl	8001f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f8ff 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e54:	e00c      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f000 f8f6 	bl	8002052 <TIM_ITRx_SetConfig>
      break;
 8001e66:	e003      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e6c:	e000      	b.n	8001e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d007      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <TIM_Base_SetConfig+0xbc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0x30>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <TIM_Base_SetConfig+0xc0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d108      	bne.n	8001f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <TIM_Base_SetConfig+0xbc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x62>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <TIM_Base_SetConfig+0xc0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <TIM_Base_SetConfig+0xb8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800

08001f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f023 030a 	bic.w	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	621a      	str	r2, [r3, #32]
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f023 0210 	bic.w	r2, r3, #16
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800201e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	031b      	lsls	r3, r3, #12
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	621a      	str	r2, [r3, #32]
}
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	f043 0307 	orr.w	r3, r3, #7
 8002074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002086:	b480      	push	{r7}
 8002088:	b087      	sub	sp, #28
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	021a      	lsls	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	609a      	str	r2, [r3, #8]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020d8:	2302      	movs	r3, #2
 80020da:	e046      	b.n	800216a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d009      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10c      	bne.n	8002158 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	4313      	orrs	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e042      	b.n	800223c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe faec 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fd7f 	bl	8002cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b20      	cmp	r3, #32
 8002262:	d17c      	bne.n	800235e <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_UART_Receive+0x2c>
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e075      	b.n	8002360 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2222      	movs	r2, #34	; 0x22
 800227e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002288:	f7fe fbda 	bl	8000a40 <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	88fa      	ldrh	r2, [r7, #6]
 8002298:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a2:	d108      	bne.n	80022b6 <HAL_UART_Receive+0x72>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	e003      	b.n	80022be <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022be:	e043      	b.n	8002348 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2200      	movs	r2, #0
 80022c8:	2120      	movs	r1, #32
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fb04 	bl	80028d8 <UART_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e042      	b.n	8002360 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10c      	bne.n	80022fa <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3302      	adds	r3, #2
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e01f      	b.n	800233a <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d007      	beq.n	8002314 <HAL_UART_Receive+0xd0>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_UART_Receive+0xde>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e008      	b.n	8002334 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232e:	b2da      	uxtb	r2, r3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1b6      	bne.n	80022c0 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800235e:	2302      	movs	r3, #2
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0ba      	sub	sp, #232	; 0xe8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800239a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_UART_IRQHandler+0x66>
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fbd1 	bl	8002b6e <UART_Receive_IT>
      return;
 80023cc:	e25b      	b.n	8002886 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80de 	beq.w	8002594 <HAL_UART_IRQHandler+0x22c>
 80023d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80d1 	beq.w	8002594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_UART_IRQHandler+0xae>
 80023fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_UART_IRQHandler+0xd2>
 8002422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0xf6>
 8002446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0204 	orr.w	r2, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_UART_IRQHandler+0x126>
 800246a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0208 	orr.w	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 81f2 	beq.w	800287c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_UART_IRQHandler+0x14e>
 80024a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fb5c 	bl	8002b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_UART_IRQHandler+0x17a>
 80024da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d04f      	beq.n	8002582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa66 	bl	80029b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d041      	beq.n	800257a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002504:	e853 3f00 	ldrex	r3, [r3]
 8002508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800252e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800253a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1d9      	bne.n	80024f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d013      	beq.n	8002572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_UART_IRQHandler+0x3e0>)
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbe8 	bl	8000d2c <HAL_DMA_Abort_IT>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	e00e      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f99c 	bl	80028b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	e00a      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f998 	bl	80028b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002580:	e006      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f994 	bl	80028b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800258e:	e175      	b.n	800287c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	bf00      	nop
    return;
 8002592:	e173      	b.n	800287c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 814f 	bne.w	800283c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8148 	beq.w	800283c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8141 	beq.w	800283c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80b6 	beq.w	800274c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8145 	beq.w	8002880 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025fe:	429a      	cmp	r2, r3
 8002600:	f080 813e 	bcs.w	8002880 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800260a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b20      	cmp	r3, #32
 8002614:	f000 8088 	beq.w	8002728 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800262e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002644:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002650:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002654:	e841 2300 	strex	r3, r2, [r1]
 8002658:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800265c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1d9      	bne.n	8002618 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266e:	e853 3f00 	ldrex	r3, [r3]
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3314      	adds	r3, #20
 8002684:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002688:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800268c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002690:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002694:	e841 2300 	strex	r3, r2, [r1]
 8002698:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800269a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e1      	bne.n	8002664 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3314      	adds	r3, #20
 80026c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e3      	bne.n	80026a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f8:	f023 0310 	bic.w	r3, r3, #16
 80026fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800270a:	65ba      	str	r2, [r7, #88]	; 0x58
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e3      	bne.n	80026e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fac7 	bl	8000cb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002736:	b29b      	uxth	r3, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8bf 	bl	80028c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002744:	e09c      	b.n	8002880 <HAL_UART_IRQHandler+0x518>
 8002746:	bf00      	nop
 8002748:	08002a79 	.word	0x08002a79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002754:	b29b      	uxth	r3, r3
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 808e 	beq.w	8002884 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8089 	beq.w	8002884 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002788:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002796:	647a      	str	r2, [r7, #68]	; 0x44
 8002798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800279c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3314      	adds	r3, #20
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	623b      	str	r3, [r7, #32]
   return(result);
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027ce:	633a      	str	r2, [r7, #48]	; 0x30
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e3      	bne.n	80027aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	330c      	adds	r3, #12
 80027f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	e853 3f00 	ldrex	r3, [r3]
 80027fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0310 	bic.w	r3, r3, #16
 8002806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002814:	61fa      	str	r2, [r7, #28]
 8002816:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	69b9      	ldr	r1, [r7, #24]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	617b      	str	r3, [r7, #20]
   return(result);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e3      	bne.n	80027f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800282e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f844 	bl	80028c2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800283a:	e023      	b.n	8002884 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800283c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_UART_IRQHandler+0x4f4>
 8002848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f923 	bl	8002aa0 <UART_Transmit_IT>
    return;
 800285a:	e014      	b.n	8002886 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00e      	beq.n	8002886 <HAL_UART_IRQHandler+0x51e>
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f962 	bl	8002b3e <UART_EndTransmit_IT>
    return;
 800287a:	e004      	b.n	8002886 <HAL_UART_IRQHandler+0x51e>
    return;
 800287c:	bf00      	nop
 800287e:	e002      	b.n	8002886 <HAL_UART_IRQHandler+0x51e>
      return;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <HAL_UART_IRQHandler+0x51e>
      return;
 8002884:	bf00      	nop
  }
}
 8002886:	37e8      	adds	r7, #232	; 0xe8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b090      	sub	sp, #64	; 0x40
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e8:	e050      	b.n	800298c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d04c      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <UART_WaitOnFlagUntilTimeout+0x30>
 80028f8:	f7fe f8a2 	bl	8000a40 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002904:	429a      	cmp	r2, r3
 8002906:	d241      	bcs.n	800298c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002928:	637a      	str	r2, [r7, #52]	; 0x34
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800292e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	613b      	str	r3, [r7, #16]
   return(result);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800295c:	623a      	str	r2, [r7, #32]
 800295e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	69f9      	ldr	r1, [r7, #28]
 8002962:	6a3a      	ldr	r2, [r7, #32]
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	61bb      	str	r3, [r7, #24]
   return(result);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e00f      	b.n	80029ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d09f      	beq.n	80028ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3740      	adds	r7, #64	; 0x40
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b095      	sub	sp, #84	; 0x54
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	330c      	adds	r3, #12
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029dc:	643a      	str	r2, [r7, #64]	; 0x40
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e5      	bne.n	80029bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d119      	bne.n	8002a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	647b      	str	r3, [r7, #68]	; 0x44
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a4c:	61ba      	str	r2, [r7, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	613b      	str	r3, [r7, #16]
   return(result);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a6e:	bf00      	nop
 8002a70:	3754      	adds	r7, #84	; 0x54
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ff0c 	bl	80028b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b21      	cmp	r3, #33	; 0x21
 8002ab2:	d13e      	bne.n	8002b32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d114      	bne.n	8002ae8 <UART_Transmit_IT+0x48>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d110      	bne.n	8002ae8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ada:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	e008      	b.n	8002afa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6211      	str	r1, [r2, #32]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4619      	mov	r1, r3
 8002b08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fe94 	bl	800288c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b08c      	sub	sp, #48	; 0x30
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b22      	cmp	r3, #34	; 0x22
 8002b80:	f040 80ae 	bne.w	8002ce0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b8c:	d117      	bne.n	8002bbe <UART_Receive_IT+0x50>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	1c9a      	adds	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
 8002bbc:	e026      	b.n	8002c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd0:	d007      	beq.n	8002be2 <UART_Receive_IT+0x74>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <UART_Receive_IT+0x82>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e008      	b.n	8002c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d15d      	bne.n	8002cdc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0220 	bic.w	r2, r2, #32
 8002c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d135      	bne.n	8002cd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	623a      	str	r2, [r7, #32]
 8002c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	69f9      	ldr	r1, [r7, #28]
 8002c92:	6a3a      	ldr	r2, [r7, #32]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d10a      	bne.n	8002cc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fdf9 	bl	80028c2 <HAL_UARTEx_RxEventCallback>
 8002cd0:	e002      	b.n	8002cd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fde3 	bl	800289e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e002      	b.n	8002ce2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e000      	b.n	8002ce2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3730      	adds	r7, #48	; 0x30
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d26:	f023 030c 	bic.w	r3, r3, #12
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <UART_SetConfig+0x114>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7fe fdf6 	bl	8001944 <HAL_RCC_GetPCLK2Freq>
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	e002      	b.n	8002d62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7fe fdde 	bl	800191c <HAL_RCC_GetPCLK1Freq>
 8002d60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <UART_SetConfig+0x118>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	0119      	lsls	r1, r3, #4
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009a      	lsls	r2, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <UART_SetConfig+0x118>)
 8002d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2064      	movs	r0, #100	; 0x64
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	3332      	adds	r3, #50	; 0x32
 8002dac:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <UART_SetConfig+0x118>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db8:	4419      	add	r1, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009a      	lsls	r2, r3, #2
 8002dc4:	441a      	add	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <UART_SetConfig+0x118>)
 8002dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	fb00 f303 	mul.w	r3, r0, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	3332      	adds	r3, #50	; 0x32
 8002de4:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <UART_SetConfig+0x118>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	f003 020f 	and.w	r2, r3, #15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	440a      	add	r2, r1
 8002df6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40013800 	.word	0x40013800
 8002e04:	51eb851f 	.word	0x51eb851f

08002e08 <memset>:
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4402      	add	r2, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	4d0c      	ldr	r5, [pc, #48]	; (8002e50 <__libc_init_array+0x38>)
 8002e1e:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e20:	1b64      	subs	r4, r4, r5
 8002e22:	10a4      	asrs	r4, r4, #2
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	f000 f81a 	bl	8002e60 <_init>
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	4d0a      	ldr	r5, [pc, #40]	; (8002e58 <__libc_init_array+0x40>)
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <__libc_init_array+0x44>)
 8002e32:	1b64      	subs	r4, r4, r5
 8002e34:	10a4      	asrs	r4, r4, #2
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	08002ea4 	.word	0x08002ea4
 8002e54:	08002ea4 	.word	0x08002ea4
 8002e58:	08002ea4 	.word	0x08002ea4
 8002e5c:	08002ea8 	.word	0x08002ea8

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
