
STM32F103C8T6_GSM_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af4  08003af4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003af4  08003af4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af4  08003af4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000014  08003b10  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08003b10  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb75  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f42  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002eb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a2  00000000  00000000  0002f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ffb  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee05  00000000  00000000  0004816d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a220  00000000  00000000  00056f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f0  00000000  00000000  000e1194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ab0 	.word	0x08003ab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08003ab0 	.word	0x08003ab0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2f>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000734:	bf24      	itt	cs
 8000736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800073a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800073e:	d90d      	bls.n	800075c <__aeabi_d2f+0x30>
 8000740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800074c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000754:	bf08      	it	eq
 8000756:	f020 0001 	biceq.w	r0, r0, #1
 800075a:	4770      	bx	lr
 800075c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000760:	d121      	bne.n	80007a6 <__aeabi_d2f+0x7a>
 8000762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000766:	bfbc      	itt	lt
 8000768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800076c:	4770      	bxlt	lr
 800076e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000772:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000776:	f1c2 0218 	rsb	r2, r2, #24
 800077a:	f1c2 0c20 	rsb	ip, r2, #32
 800077e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	bf18      	it	ne
 8000788:	f040 0001 	orrne.w	r0, r0, #1
 800078c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000794:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000798:	ea40 000c 	orr.w	r0, r0, ip
 800079c:	fa23 f302 	lsr.w	r3, r3, r2
 80007a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007a4:	e7cc      	b.n	8000740 <__aeabi_d2f+0x14>
 80007a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007aa:	d107      	bne.n	80007bc <__aeabi_d2f+0x90>
 80007ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007b0:	bf1e      	ittt	ne
 80007b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ba:	4770      	bxne	lr
 80007bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <Set_Time>:
};

// ----------------------------------------------

void Set_Time()
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
	struct GGA_Str Time;

	Time.hh = ((GPGGA_Data[7]-'0')*10+(uint8_t)GPGGA_Data[8]-'0')+3; //GMT +3
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <Set_Time+0x70>)
 80007d4:	79db      	ldrb	r3, [r3, #7]
 80007d6:	3b30      	subs	r3, #48	; 0x30
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	0092      	lsls	r2, r2, #2
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <Set_Time+0x70>)
 80007e6:	7a1b      	ldrb	r3, [r3, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	3b2d      	subs	r3, #45	; 0x2d
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	703b      	strb	r3, [r7, #0]
	Time.mm = (GPGGA_Data[9]-'0')*10+(uint8_t)GPGGA_Data[10]-'0';
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <Set_Time+0x70>)
 80007f4:	7a5b      	ldrb	r3, [r3, #9]
 80007f6:	3b30      	subs	r3, #48	; 0x30
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	0092      	lsls	r2, r2, #2
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <Set_Time+0x70>)
 8000806:	7a9b      	ldrb	r3, [r3, #10]
 8000808:	4413      	add	r3, r2
 800080a:	b2db      	uxtb	r3, r3
 800080c:	3b30      	subs	r3, #48	; 0x30
 800080e:	b2db      	uxtb	r3, r3
 8000810:	707b      	strb	r3, [r7, #1]
	Time.ss = (GPGGA_Data[11]-'0')*10+(uint8_t)GPGGA_Data[12]-'0';
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <Set_Time+0x70>)
 8000814:	7adb      	ldrb	r3, [r3, #11]
 8000816:	3b30      	subs	r3, #48	; 0x30
 8000818:	b2db      	uxtb	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	0092      	lsls	r2, r2, #2
 800081e:	4413      	add	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <Set_Time+0x70>)
 8000826:	7b1b      	ldrb	r3, [r3, #12]
 8000828:	4413      	add	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3b30      	subs	r3, #48	; 0x30
 800082e:	b2db      	uxtb	r3, r3
 8000830:	70bb      	strb	r3, [r7, #2]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000094 	.word	0x20000094

08000840 <Set_Location>:

void Set_Location()
{
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
	struct Coordinate Coord;


	Coord.latitude= (GPGGA_Data[17]-'0')*10 + (GPGGA_Data[18]-'0')*1 + (GPGGA_Data[19]-'0')*0.1 + (GPGGA_Data[20]-'0')*0.01 + (GPGGA_Data[21]-'0')*0.001 + (GPGGA_Data[22]-'0')*0.0001 + (GPGGA_Data[23]-'0')*0.00001 + (GPGGA_Data[24]-'0')*0.000001 + (GPGGA_Data[25]-'0')*0.0000001 + (GPGGA_Data[26]-'0')*0.00000001;
 8000846:	4bdc      	ldr	r3, [pc, #880]	; (8000bb8 <Set_Location+0x378>)
 8000848:	7c5b      	ldrb	r3, [r3, #17]
 800084a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	461a      	mov	r2, r3
 8000858:	4bd7      	ldr	r3, [pc, #860]	; (8000bb8 <Set_Location+0x378>)
 800085a:	7c9b      	ldrb	r3, [r3, #18]
 800085c:	3b30      	subs	r3, #48	; 0x30
 800085e:	4413      	add	r3, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fef9 	bl	8000658 <__aeabi_i2d>
 8000866:	4604      	mov	r4, r0
 8000868:	460d      	mov	r5, r1
 800086a:	4bd3      	ldr	r3, [pc, #844]	; (8000bb8 <Set_Location+0x378>)
 800086c:	7cdb      	ldrb	r3, [r3, #19]
 800086e:	3b30      	subs	r3, #48	; 0x30
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fef1 	bl	8000658 <__aeabi_i2d>
 8000876:	a3c0      	add	r3, pc, #768	; (adr r3, 8000b78 <Set_Location+0x338>)
 8000878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087c:	f7ff fc70 	bl	8000160 <__aeabi_dmul>
 8000880:	4602      	mov	r2, r0
 8000882:	460b      	mov	r3, r1
 8000884:	4620      	mov	r0, r4
 8000886:	4629      	mov	r1, r5
 8000888:	f7ff fd9a 	bl	80003c0 <__adddf3>
 800088c:	4602      	mov	r2, r0
 800088e:	460b      	mov	r3, r1
 8000890:	4614      	mov	r4, r2
 8000892:	461d      	mov	r5, r3
 8000894:	4bc8      	ldr	r3, [pc, #800]	; (8000bb8 <Set_Location+0x378>)
 8000896:	7d1b      	ldrb	r3, [r3, #20]
 8000898:	3b30      	subs	r3, #48	; 0x30
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fedc 	bl	8000658 <__aeabi_i2d>
 80008a0:	a3b7      	add	r3, pc, #732	; (adr r3, 8000b80 <Set_Location+0x340>)
 80008a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a6:	f7ff fc5b 	bl	8000160 <__aeabi_dmul>
 80008aa:	4602      	mov	r2, r0
 80008ac:	460b      	mov	r3, r1
 80008ae:	4620      	mov	r0, r4
 80008b0:	4629      	mov	r1, r5
 80008b2:	f7ff fd85 	bl	80003c0 <__adddf3>
 80008b6:	4602      	mov	r2, r0
 80008b8:	460b      	mov	r3, r1
 80008ba:	4614      	mov	r4, r2
 80008bc:	461d      	mov	r5, r3
 80008be:	4bbe      	ldr	r3, [pc, #760]	; (8000bb8 <Set_Location+0x378>)
 80008c0:	7d5b      	ldrb	r3, [r3, #21]
 80008c2:	3b30      	subs	r3, #48	; 0x30
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fec7 	bl	8000658 <__aeabi_i2d>
 80008ca:	a3af      	add	r3, pc, #700	; (adr r3, 8000b88 <Set_Location+0x348>)
 80008cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d0:	f7ff fc46 	bl	8000160 <__aeabi_dmul>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4620      	mov	r0, r4
 80008da:	4629      	mov	r1, r5
 80008dc:	f7ff fd70 	bl	80003c0 <__adddf3>
 80008e0:	4602      	mov	r2, r0
 80008e2:	460b      	mov	r3, r1
 80008e4:	4614      	mov	r4, r2
 80008e6:	461d      	mov	r5, r3
 80008e8:	4bb3      	ldr	r3, [pc, #716]	; (8000bb8 <Set_Location+0x378>)
 80008ea:	7d9b      	ldrb	r3, [r3, #22]
 80008ec:	3b30      	subs	r3, #48	; 0x30
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff feb2 	bl	8000658 <__aeabi_i2d>
 80008f4:	a3a6      	add	r3, pc, #664	; (adr r3, 8000b90 <Set_Location+0x350>)
 80008f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fa:	f7ff fc31 	bl	8000160 <__aeabi_dmul>
 80008fe:	4602      	mov	r2, r0
 8000900:	460b      	mov	r3, r1
 8000902:	4620      	mov	r0, r4
 8000904:	4629      	mov	r1, r5
 8000906:	f7ff fd5b 	bl	80003c0 <__adddf3>
 800090a:	4602      	mov	r2, r0
 800090c:	460b      	mov	r3, r1
 800090e:	4614      	mov	r4, r2
 8000910:	461d      	mov	r5, r3
 8000912:	4ba9      	ldr	r3, [pc, #676]	; (8000bb8 <Set_Location+0x378>)
 8000914:	7ddb      	ldrb	r3, [r3, #23]
 8000916:	3b30      	subs	r3, #48	; 0x30
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe9d 	bl	8000658 <__aeabi_i2d>
 800091e:	a39e      	add	r3, pc, #632	; (adr r3, 8000b98 <Set_Location+0x358>)
 8000920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000924:	f7ff fc1c 	bl	8000160 <__aeabi_dmul>
 8000928:	4602      	mov	r2, r0
 800092a:	460b      	mov	r3, r1
 800092c:	4620      	mov	r0, r4
 800092e:	4629      	mov	r1, r5
 8000930:	f7ff fd46 	bl	80003c0 <__adddf3>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4614      	mov	r4, r2
 800093a:	461d      	mov	r5, r3
 800093c:	4b9e      	ldr	r3, [pc, #632]	; (8000bb8 <Set_Location+0x378>)
 800093e:	7e1b      	ldrb	r3, [r3, #24]
 8000940:	3b30      	subs	r3, #48	; 0x30
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe88 	bl	8000658 <__aeabi_i2d>
 8000948:	a395      	add	r3, pc, #596	; (adr r3, 8000ba0 <Set_Location+0x360>)
 800094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094e:	f7ff fc07 	bl	8000160 <__aeabi_dmul>
 8000952:	4602      	mov	r2, r0
 8000954:	460b      	mov	r3, r1
 8000956:	4620      	mov	r0, r4
 8000958:	4629      	mov	r1, r5
 800095a:	f7ff fd31 	bl	80003c0 <__adddf3>
 800095e:	4602      	mov	r2, r0
 8000960:	460b      	mov	r3, r1
 8000962:	4614      	mov	r4, r2
 8000964:	461d      	mov	r5, r3
 8000966:	4b94      	ldr	r3, [pc, #592]	; (8000bb8 <Set_Location+0x378>)
 8000968:	7e5b      	ldrb	r3, [r3, #25]
 800096a:	3b30      	subs	r3, #48	; 0x30
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe73 	bl	8000658 <__aeabi_i2d>
 8000972:	a38d      	add	r3, pc, #564	; (adr r3, 8000ba8 <Set_Location+0x368>)
 8000974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000978:	f7ff fbf2 	bl	8000160 <__aeabi_dmul>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	4620      	mov	r0, r4
 8000982:	4629      	mov	r1, r5
 8000984:	f7ff fd1c 	bl	80003c0 <__adddf3>
 8000988:	4602      	mov	r2, r0
 800098a:	460b      	mov	r3, r1
 800098c:	4614      	mov	r4, r2
 800098e:	461d      	mov	r5, r3
 8000990:	4b89      	ldr	r3, [pc, #548]	; (8000bb8 <Set_Location+0x378>)
 8000992:	7e9b      	ldrb	r3, [r3, #26]
 8000994:	3b30      	subs	r3, #48	; 0x30
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fe5e 	bl	8000658 <__aeabi_i2d>
 800099c:	a384      	add	r3, pc, #528	; (adr r3, 8000bb0 <Set_Location+0x370>)
 800099e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a2:	f7ff fbdd 	bl	8000160 <__aeabi_dmul>
 80009a6:	4602      	mov	r2, r0
 80009a8:	460b      	mov	r3, r1
 80009aa:	4620      	mov	r0, r4
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff fd07 	bl	80003c0 <__adddf3>
 80009b2:	4602      	mov	r2, r0
 80009b4:	460b      	mov	r3, r1
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff feb7 	bl	800072c <__aeabi_d2f>
 80009be:	4603      	mov	r3, r0
 80009c0:	603b      	str	r3, [r7, #0]
	Coord.L_hemisphere=GPGGA_Data[28];
 80009c2:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <Set_Location+0x378>)
 80009c4:	7f1b      	ldrb	r3, [r3, #28]
 80009c6:	713b      	strb	r3, [r7, #4]
	Coord.longitude= (GPGGA_Data[31]-'0')*10 + (GPGGA_Data[32]-'0')*1 + (GPGGA_Data[33]-'0')*0.1 + (GPGGA_Data[34]-'0')*0.01 + (GPGGA_Data[35]-'0')*0.001 + (GPGGA_Data[36]-'0')*0.0001 + (GPGGA_Data[37]-'0')*0.00001 + (GPGGA_Data[38]-'0')*0.000001 + (GPGGA_Data[39]-'0')*0.0000001 + (GPGGA_Data-'0')[40]*0.00000001;
 80009c8:	4b7b      	ldr	r3, [pc, #492]	; (8000bb8 <Set_Location+0x378>)
 80009ca:	7fdb      	ldrb	r3, [r3, #31]
 80009cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	461a      	mov	r2, r3
 80009da:	4b77      	ldr	r3, [pc, #476]	; (8000bb8 <Set_Location+0x378>)
 80009dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e0:	3b30      	subs	r3, #48	; 0x30
 80009e2:	4413      	add	r3, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe37 	bl	8000658 <__aeabi_i2d>
 80009ea:	4604      	mov	r4, r0
 80009ec:	460d      	mov	r5, r1
 80009ee:	4b72      	ldr	r3, [pc, #456]	; (8000bb8 <Set_Location+0x378>)
 80009f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009f4:	3b30      	subs	r3, #48	; 0x30
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe2e 	bl	8000658 <__aeabi_i2d>
 80009fc:	a35e      	add	r3, pc, #376	; (adr r3, 8000b78 <Set_Location+0x338>)
 80009fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a02:	f7ff fbad 	bl	8000160 <__aeabi_dmul>
 8000a06:	4602      	mov	r2, r0
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	4629      	mov	r1, r5
 8000a0e:	f7ff fcd7 	bl	80003c0 <__adddf3>
 8000a12:	4602      	mov	r2, r0
 8000a14:	460b      	mov	r3, r1
 8000a16:	4614      	mov	r4, r2
 8000a18:	461d      	mov	r5, r3
 8000a1a:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <Set_Location+0x378>)
 8000a1c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a20:	3b30      	subs	r3, #48	; 0x30
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe18 	bl	8000658 <__aeabi_i2d>
 8000a28:	a355      	add	r3, pc, #340	; (adr r3, 8000b80 <Set_Location+0x340>)
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	f7ff fb97 	bl	8000160 <__aeabi_dmul>
 8000a32:	4602      	mov	r2, r0
 8000a34:	460b      	mov	r3, r1
 8000a36:	4620      	mov	r0, r4
 8000a38:	4629      	mov	r1, r5
 8000a3a:	f7ff fcc1 	bl	80003c0 <__adddf3>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	460b      	mov	r3, r1
 8000a42:	4614      	mov	r4, r2
 8000a44:	461d      	mov	r5, r3
 8000a46:	4b5c      	ldr	r3, [pc, #368]	; (8000bb8 <Set_Location+0x378>)
 8000a48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a4c:	3b30      	subs	r3, #48	; 0x30
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe02 	bl	8000658 <__aeabi_i2d>
 8000a54:	a34c      	add	r3, pc, #304	; (adr r3, 8000b88 <Set_Location+0x348>)
 8000a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5a:	f7ff fb81 	bl	8000160 <__aeabi_dmul>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	460b      	mov	r3, r1
 8000a62:	4620      	mov	r0, r4
 8000a64:	4629      	mov	r1, r5
 8000a66:	f7ff fcab 	bl	80003c0 <__adddf3>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	4614      	mov	r4, r2
 8000a70:	461d      	mov	r5, r3
 8000a72:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <Set_Location+0x378>)
 8000a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a78:	3b30      	subs	r3, #48	; 0x30
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fdec 	bl	8000658 <__aeabi_i2d>
 8000a80:	a343      	add	r3, pc, #268	; (adr r3, 8000b90 <Set_Location+0x350>)
 8000a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a86:	f7ff fb6b 	bl	8000160 <__aeabi_dmul>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	4620      	mov	r0, r4
 8000a90:	4629      	mov	r1, r5
 8000a92:	f7ff fc95 	bl	80003c0 <__adddf3>
 8000a96:	4602      	mov	r2, r0
 8000a98:	460b      	mov	r3, r1
 8000a9a:	4614      	mov	r4, r2
 8000a9c:	461d      	mov	r5, r3
 8000a9e:	4b46      	ldr	r3, [pc, #280]	; (8000bb8 <Set_Location+0x378>)
 8000aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aa4:	3b30      	subs	r3, #48	; 0x30
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fdd6 	bl	8000658 <__aeabi_i2d>
 8000aac:	a33a      	add	r3, pc, #232	; (adr r3, 8000b98 <Set_Location+0x358>)
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f7ff fb55 	bl	8000160 <__aeabi_dmul>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f7ff fc7f 	bl	80003c0 <__adddf3>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	4614      	mov	r4, r2
 8000ac8:	461d      	mov	r5, r3
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <Set_Location+0x378>)
 8000acc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ad0:	3b30      	subs	r3, #48	; 0x30
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fdc0 	bl	8000658 <__aeabi_i2d>
 8000ad8:	a331      	add	r3, pc, #196	; (adr r3, 8000ba0 <Set_Location+0x360>)
 8000ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ade:	f7ff fb3f 	bl	8000160 <__aeabi_dmul>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	4629      	mov	r1, r5
 8000aea:	f7ff fc69 	bl	80003c0 <__adddf3>
 8000aee:	4602      	mov	r2, r0
 8000af0:	460b      	mov	r3, r1
 8000af2:	4614      	mov	r4, r2
 8000af4:	461d      	mov	r5, r3
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <Set_Location+0x378>)
 8000af8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000afc:	3b30      	subs	r3, #48	; 0x30
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fdaa 	bl	8000658 <__aeabi_i2d>
 8000b04:	a328      	add	r3, pc, #160	; (adr r3, 8000ba8 <Set_Location+0x368>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	f7ff fb29 	bl	8000160 <__aeabi_dmul>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4620      	mov	r0, r4
 8000b14:	4629      	mov	r1, r5
 8000b16:	f7ff fc53 	bl	80003c0 <__adddf3>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	4614      	mov	r4, r2
 8000b20:	461d      	mov	r5, r3
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <Set_Location+0x378>)
 8000b24:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fd95 	bl	8000658 <__aeabi_i2d>
 8000b2e:	a320      	add	r3, pc, #128	; (adr r3, 8000bb0 <Set_Location+0x370>)
 8000b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b34:	f7ff fb14 	bl	8000160 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	4629      	mov	r1, r5
 8000b40:	f7ff fc3e 	bl	80003c0 <__adddf3>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4610      	mov	r0, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f7ff fdee 	bl	800072c <__aeabi_d2f>
 8000b50:	4603      	mov	r3, r0
 8000b52:	60bb      	str	r3, [r7, #8]
	Coord.T_hemisphere = GPGGA_Data[42];
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <Set_Location+0x378>)
 8000b56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b5a:	733b      	strb	r3, [r7, #12]

	if(Coord.L_hemisphere == 'N' || Coord.L_hemisphere == 'S' && Coord.T_hemisphere == 'E'  || Coord.T_hemisphere == 'W')
 8000b5c:	793b      	ldrb	r3, [r7, #4]
 8000b5e:	2b4e      	cmp	r3, #78	; 0x4e
 8000b60:	d02c      	beq.n	8000bbc <Set_Location+0x37c>
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	2b53      	cmp	r3, #83	; 0x53
 8000b66:	d102      	bne.n	8000b6e <Set_Location+0x32e>
 8000b68:	7b3b      	ldrb	r3, [r7, #12]
 8000b6a:	2b45      	cmp	r3, #69	; 0x45
 8000b6c:	d026      	beq.n	8000bbc <Set_Location+0x37c>
 8000b6e:	7b3b      	ldrb	r3, [r7, #12]
 8000b70:	2b57      	cmp	r3, #87	; 0x57
 8000b72:	d127      	bne.n	8000bc4 <Set_Location+0x384>
 8000b74:	e022      	b.n	8000bbc <Set_Location+0x37c>
 8000b76:	bf00      	nop
 8000b78:	9999999a 	.word	0x9999999a
 8000b7c:	3fb99999 	.word	0x3fb99999
 8000b80:	47ae147b 	.word	0x47ae147b
 8000b84:	3f847ae1 	.word	0x3f847ae1
 8000b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8000b8c:	3f50624d 	.word	0x3f50624d
 8000b90:	eb1c432d 	.word	0xeb1c432d
 8000b94:	3f1a36e2 	.word	0x3f1a36e2
 8000b98:	88e368f1 	.word	0x88e368f1
 8000b9c:	3ee4f8b5 	.word	0x3ee4f8b5
 8000ba0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000ba4:	3eb0c6f7 	.word	0x3eb0c6f7
 8000ba8:	9abcaf48 	.word	0x9abcaf48
 8000bac:	3e7ad7f2 	.word	0x3e7ad7f2
 8000bb0:	e2308c3a 	.word	0xe2308c3a
 8000bb4:	3e45798e 	.word	0x3e45798e
 8000bb8:	20000094 	.word	0x20000094
	{
		GPS_Connection_Stat = true;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <Set_Location+0x394>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e003      	b.n	8000bcc <Set_Location+0x38c>
	}
	else GPS_Connection_Stat = false;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <Set_Location+0x394>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd4:	200000f8 	.word	0x200000f8

08000bd8 <Get_RMC>:


void Get_RMC()//Recommended Minimum Navigation Information
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
 8000bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <Get_RMC+0x28>)
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <Get_RMC+0x2c>)
 8000be8:	f002 f8ff 	bl	8002dea <HAL_UART_Receive>
	Reorder_data(Sp_finder(GPRMC),GPRMC);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f823 	bl	8000c38 <Sp_finder>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f8ac 	bl	8000d54 <Reorder_data>

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200001d4 	.word	0x200001d4
 8000c04:	2000018c 	.word	0x2000018c

08000c08 <Get_GGA>:

void Get_GGA()//GLOBAL POSITIONING SYSTEM FIX DATA
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2,(uint8_t*)Buffer,500, 1000);
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c14:	4906      	ldr	r1, [pc, #24]	; (8000c30 <Get_GGA+0x28>)
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <Get_GGA+0x2c>)
 8000c18:	f002 f8e7 	bl	8002dea <HAL_UART_Receive>
	Reorder_data(Sp_finder(GPGGA),GPGGA);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f000 f80b 	bl	8000c38 <Sp_finder>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f894 	bl	8000d54 <Reorder_data>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200001d4 	.word	0x200001d4
 8000c34:	2000018c 	.word	0x2000018c

08000c38 <Sp_finder>:

uint16_t Sp_finder(uint8_t s_case)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	switch(s_case)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d87b      	bhi.n	8000d40 <Sp_finder+0x108>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <Sp_finder+0x18>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000d41 	.word	0x08000d41
 8000c58:	08000cd5 	.word	0x08000cd5
 8000c5c:	08000d41 	.word	0x08000d41
 8000c60:	08000d41 	.word	0x08000d41
 8000c64:	08000d41 	.word	0x08000d41
	{

		case 0:  //GPRMC
			for(int i=0;i<500;i++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e02d      	b.n	8000cca <Sp_finder+0x92>
			{
				if(Buffer[i]== '$')
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <Sp_finder+0x114>)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b24      	cmp	r3, #36	; 0x24
 8000c78:	d124      	bne.n	8000cc4 <Sp_finder+0x8c>
				{
					if(Buffer[i+1]== 'G')
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <Sp_finder+0x114>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	2b47      	cmp	r3, #71	; 0x47
 8000c84:	d11e      	bne.n	8000cc4 <Sp_finder+0x8c>
					{
						if(Buffer[i+2]== 'P')
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <Sp_finder+0x114>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	2b50      	cmp	r3, #80	; 0x50
 8000c90:	d118      	bne.n	8000cc4 <Sp_finder+0x8c>
						{
							if(Buffer[i+3]== 'R')
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3303      	adds	r3, #3
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <Sp_finder+0x114>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	2b52      	cmp	r3, #82	; 0x52
 8000c9c:	d112      	bne.n	8000cc4 <Sp_finder+0x8c>
							{
								if(Buffer[i+4]== 'M')
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	4a2a      	ldr	r2, [pc, #168]	; (8000d4c <Sp_finder+0x114>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	2b4d      	cmp	r3, #77	; 0x4d
 8000ca8:	d10c      	bne.n	8000cc4 <Sp_finder+0x8c>
								{
									if(Buffer[i+5]== 'C')
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3305      	adds	r3, #5
 8000cae:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <Sp_finder+0x114>)
 8000cb0:	5cd3      	ldrb	r3, [r2, r3]
 8000cb2:	2b43      	cmp	r3, #67	; 0x43
 8000cb4:	d106      	bne.n	8000cc4 <Sp_finder+0x8c>
									{
										Strting_point=i;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <Sp_finder+0x118>)
 8000cbc:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	e03e      	b.n	8000d42 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cd0:	dbcd      	blt.n	8000c6e <Sp_finder+0x36>
							}
						}
					}
				}
			}
			break;
 8000cd2:	e036      	b.n	8000d42 <Sp_finder+0x10a>

			return;
			break;

		case 2://GPGGA
			for(int i=0;i<500;i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	e02d      	b.n	8000d36 <Sp_finder+0xfe>
			{
				if(Buffer[i]== '$')
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <Sp_finder+0x114>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4413      	add	r3, r2
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b24      	cmp	r3, #36	; 0x24
 8000ce4:	d124      	bne.n	8000d30 <Sp_finder+0xf8>
				{
					if(Buffer[i+1]== 'G')
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <Sp_finder+0x114>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	2b47      	cmp	r3, #71	; 0x47
 8000cf0:	d11e      	bne.n	8000d30 <Sp_finder+0xf8>
					{
						if(Buffer[i+2]== 'P')
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <Sp_finder+0x114>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	2b50      	cmp	r3, #80	; 0x50
 8000cfc:	d118      	bne.n	8000d30 <Sp_finder+0xf8>
						{
							if(Buffer[i+3]== 'G')
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3303      	adds	r3, #3
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <Sp_finder+0x114>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	2b47      	cmp	r3, #71	; 0x47
 8000d08:	d112      	bne.n	8000d30 <Sp_finder+0xf8>
							{
								if(Buffer[i+4]== 'G')
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <Sp_finder+0x114>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	2b47      	cmp	r3, #71	; 0x47
 8000d14:	d10c      	bne.n	8000d30 <Sp_finder+0xf8>
								{
									if(Buffer[i+5]== 'A')
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3305      	adds	r3, #5
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <Sp_finder+0x114>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	2b41      	cmp	r3, #65	; 0x41
 8000d20:	d106      	bne.n	8000d30 <Sp_finder+0xf8>
									{
										Strting_point=i;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <Sp_finder+0x118>)
 8000d28:	801a      	strh	r2, [r3, #0]
										return (uint16_t)i;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	e008      	b.n	8000d42 <Sp_finder+0x10a>
			for(int i=0;i<500;i++)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d3c:	dbcd      	blt.n	8000cda <Sp_finder+0xa2>
							}
						}
					}
				}
			}
			return;
 8000d3e:	e000      	b.n	8000d42 <Sp_finder+0x10a>

			return;
			break;

		default:
			return;
 8000d40:	bf00      	nop
			break;

	}

}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	200001d4 	.word	0x200001d4
 8000d50:	200000fa 	.word	0x200000fa

08000d54 <Reorder_data>:

void Reorder_data(uint16_t sp,uint8_t s_case)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	717b      	strb	r3, [r7, #5]
	uint16_t syc=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	81fb      	strh	r3, [r7, #14]
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8000d68:	e027      	b.n	8000dba <Reorder_data+0x66>
	{

		syc++;
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	81fb      	strh	r3, [r7, #14]
		sp++;
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	3301      	adds	r3, #1
 8000d74:	80fb      	strh	r3, [r7, #6]

		switch(s_case)
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d81d      	bhi.n	8000db8 <Reorder_data+0x64>
 8000d7c:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <Reorder_data+0x30>)
 8000d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d82:	bf00      	nop
 8000d84:	08000d9d 	.word	0x08000d9d
 8000d88:	08000dbb 	.word	0x08000dbb
 8000d8c:	08000dab 	.word	0x08000dab
 8000d90:	08000dbb 	.word	0x08000dbb
 8000d94:	08000dbb 	.word	0x08000dbb
 8000d98:	08000dbb 	.word	0x08000dbb
		{

			case 0:
				GPRMC_Data[syc]=Buffer[sp];
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <Reorder_data+0x88>)
 8000da2:	5c89      	ldrb	r1, [r1, r2]
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <Reorder_data+0x8c>)
 8000da6:	54d1      	strb	r1, [r2, r3]
				break;
 8000da8:	e007      	b.n	8000dba <Reorder_data+0x66>


				break;

			case 2:
				GPGGA_Data[syc]=Buffer[sp];
 8000daa:	88fa      	ldrh	r2, [r7, #6]
 8000dac:	89fb      	ldrh	r3, [r7, #14]
 8000dae:	490b      	ldr	r1, [pc, #44]	; (8000ddc <Reorder_data+0x88>)
 8000db0:	5c89      	ldrb	r1, [r1, r2]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <Reorder_data+0x90>)
 8000db4:	54d1      	strb	r1, [r2, r3]

				break;
 8000db6:	e000      	b.n	8000dba <Reorder_data+0x66>

				break;

			default:

				break;
 8000db8:	bf00      	nop
	while(Buffer[syc]!='\r'&& Buffer[syc+1]!='\n')
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <Reorder_data+0x88>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	2b0d      	cmp	r3, #13
 8000dc2:	d005      	beq.n	8000dd0 <Reorder_data+0x7c>
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <Reorder_data+0x88>)
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	2b0a      	cmp	r3, #10
 8000dce:	d1cc      	bne.n	8000d6a <Reorder_data+0x16>

		}

	}
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001d4 	.word	0x200001d4
 8000de0:	20000030 	.word	0x20000030
 8000de4:	20000094 	.word	0x20000094

08000de8 <test>:
	 Command15[]="AT+CIPSHUT"
;
//------------------------

void test()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)Command1,strlen(Command1),100);//!!HUART1 TX VERİ GÖNDERMİYOR
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <test+0x1c>)
 8000dee:	f7ff f9af 	bl	8000150 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	4902      	ldr	r1, [pc, #8]	; (8000e04 <test+0x1c>)
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <test+0x20>)
 8000dfc:	f001 ff72 	bl	8002ce4 <HAL_UART_Transmit>
	//HAL_UART_Receive(&huart1,(uint8_t*)buffer22,2, 100);

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000144 	.word	0x20000144

08000e0c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	//if(htim->Instance == htim1.Instance)
	if(htim == &htim1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d10a      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);
 8000e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e22:	f000 fee7 	bl	8001bf4 <HAL_GPIO_TogglePin>
		Set_Time();
 8000e26:	f7ff fcd1 	bl	80007cc <Set_Time>
		Set_Location();
 8000e2a:	f7ff fd09 	bl	8000840 <Set_Location>
		test();
 8000e2e:	f7ff ffdb 	bl	8000de8 <test>
	}
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000fc 	.word	0x200000fc
 8000e40:	40011000 	.word	0x40011000

08000e44 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_UART_RxCpltCallback+0x48>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d111      	bne.n	8000e78 <HAL_UART_RxCpltCallback+0x34>
	{
		int syc=0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
		while(RxBuffer[syc]!='O')
 8000e58:	e002      	b.n	8000e60 <HAL_UART_RxCpltCallback+0x1c>
		{


			syc++;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
		while(RxBuffer[syc]!='O')
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_UART_RxCpltCallback+0x4c>)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b4f      	cmp	r3, #79	; 0x4f
 8000e6a:	d1f6      	bne.n	8000e5a <HAL_UART_RxCpltCallback+0x16>

		}

		ReOrder[0]=RxBuffer[syc];
 8000e6c:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_UART_RxCpltCallback+0x4c>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_UART_RxCpltCallback+0x50>)
 8000e76:	701a      	strb	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)RxBuffer,5);
 8000e78:	2205      	movs	r2, #5
 8000e7a:	4905      	ldr	r1, [pc, #20]	; (8000e90 <HAL_UART_RxCpltCallback+0x4c>)
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <HAL_UART_RxCpltCallback+0x48>)
 8000e7e:	f002 f846 	bl	8002f0e <HAL_UART_Receive_IT>

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000144 	.word	0x20000144
 8000e90:	2000042c 	.word	0x2000042c
 8000e94:	20000434 	.word	0x20000434

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fac8 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f826 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f904 	bl	80010b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ea8:	f000 f8ae 	bl	8001008 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 f8d6 	bl	800105c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f858 	bl	8000f64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, (uint8_t*)RxBuffer,5);
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	490a      	ldr	r1, [pc, #40]	; (8000ee0 <main+0x48>)
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <main+0x4c>)
 8000eba:	f002 f828 	bl	8002f0e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <main+0x50>)
 8000ec0:	f001 fb12 	bl	80024e8 <HAL_TIM_Base_Start_IT>

  memset(Data,0,100);
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <main+0x54>)
 8000eca:	f002 fdc5 	bl	8003a58 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8000ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed2:	f000 fb0f 	bl	80014f4 <HAL_Delay>
	  //HAL_GPIO_TogglePin(Blink_GPIO_Port,Blink_Pin);

	  Get_GGA();
 8000ed6:	f7ff fe97 	bl	8000c08 <Get_GGA>
	  Get_RMC();
 8000eda:	f7ff fe7d 	bl	8000bd8 <Get_RMC>
	  HAL_Delay(1000);
 8000ede:	e7f6      	b.n	8000ece <main+0x36>
 8000ee0:	2000042c 	.word	0x2000042c
 8000ee4:	20000144 	.word	0x20000144
 8000ee8:	200000fc 	.word	0x200000fc
 8000eec:	200003c8 	.word	0x200003c8

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b090      	sub	sp, #64	; 0x40
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fdaa 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fe7f 	bl	8001c28 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000f30:	f000 f92c 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 f8ed 	bl	800212c <HAL_RCC_ClockConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000f58:	f000 f918 	bl	800118c <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3740      	adds	r7, #64	; 0x40
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <MX_TIM1_Init+0xa0>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f88:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000fb0:	f001 fa4a 	bl	8002448 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fba:	f000 f8e7 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000fcc:	f001 fbe6 	bl	800279c <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000fd6:	f000 f8d9 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000fe8:	f001 fdbc 	bl	8002b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f8cb 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000fc 	.word	0x200000fc
 8001004:	40012c00 	.word	0x40012c00

08001008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART1_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001040:	f001 fe00 	bl	8002c44 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f000 f89f 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000144 	.word	0x20000144
 8001058:	40013800 	.word	0x40013800

0800105c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_USART2_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001094:	f001 fdd6 	bl	8002c44 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f875 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000018c 	.word	0x2000018c
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2d      	ldr	r2, [pc, #180]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_GPIO_Init+0xd0>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_GPIO_Init+0xd0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_GPIO_Init+0xd0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_GPIO_Init+0xd0>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_GPIO_Init+0xd0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <MX_GPIO_Init+0xd4>)
 800112c:	f000 fd4a 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_GPIO_Init+0xd8>)
 8001138:	f000 fd44 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4619      	mov	r1, r3
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <MX_GPIO_Init+0xd4>)
 8001156:	f000 fbb1 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Relay_Pin */
  GPIO_InitStruct.Pin = Relay_Pin;
 800115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Relay_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_GPIO_Init+0xd8>)
 8001174:	f000 fba2 	bl	80018bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	40011000 	.word	0x40011000
 8001188:	40010c00 	.word	0x40010c00

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_MspInit+0x5c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_MspInit+0x5c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_MspInit+0x60>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_MspInit+0x60>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000

080011fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_TIM_Base_MspInit+0x44>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d113      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 8001214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_TIM_Base_MspInit+0x48>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2019      	movs	r0, #25
 800122c:	f000 fa5d 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001230:	2019      	movs	r0, #25
 8001232:	f000 fa76 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_UART_MspInit+0x108>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d13a      	bne.n	80012de <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_UART_MspInit+0x10c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <HAL_UART_MspInit+0x10c>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_UART_MspInit+0x10c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_UART_MspInit+0x10c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_UART_MspInit+0x10c>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <HAL_UART_MspInit+0x10c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0318 	add.w	r3, r7, #24
 80012aa:	4619      	mov	r1, r3
 80012ac:	482a      	ldr	r0, [pc, #168]	; (8001358 <HAL_UART_MspInit+0x110>)
 80012ae:	f000 fb05 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4619      	mov	r1, r3
 80012c6:	4824      	ldr	r0, [pc, #144]	; (8001358 <HAL_UART_MspInit+0x110>)
 80012c8:	f000 faf8 	bl	80018bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2025      	movs	r0, #37	; 0x25
 80012d2:	f000 fa0a 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d6:	2025      	movs	r0, #37	; 0x25
 80012d8:	f000 fa23 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012dc:	e034      	b.n	8001348 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_UART_MspInit+0x114>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d12f      	bne.n	8001348 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_UART_MspInit+0x10c>)
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_UART_MspInit+0x10c>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f2:	61d3      	str	r3, [r2, #28]
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_UART_MspInit+0x10c>)
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_UART_MspInit+0x10c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <HAL_UART_MspInit+0x10c>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_UART_MspInit+0x10c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001318:	2304      	movs	r3, #4
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4619      	mov	r1, r3
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <HAL_UART_MspInit+0x110>)
 800132c:	f000 fac6 	bl	80018bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001330:	2308      	movs	r3, #8
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	4619      	mov	r1, r3
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_UART_MspInit+0x110>)
 8001344:	f000 faba 	bl	80018bc <HAL_GPIO_Init>
}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000
 8001358:	40010800 	.word	0x40010800
 800135c:	40004400 	.word	0x40004400

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a6:	f000 f889 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_UP_IRQHandler+0x10>)
 80013b6:	f001 f8e9 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000fc 	.word	0x200000fc

080013c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <USART1_IRQHandler+0x10>)
 80013ca:	f001 fdc5 	bl	8002f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000144 	.word	0x20000144

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff fff8 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ea:	490c      	ldr	r1, [pc, #48]	; (800141c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001400:	4c09      	ldr	r4, [pc, #36]	; (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f002 fb2b 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fd41 	bl	8000e98 <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001420:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8001424:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001428:	2000043c 	.word	0x2000043c

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f947 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fea4 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f95f 	bl	800173e <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f927 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000010 	.word	0x20000010
 80014b8:	2000000c 	.word	0x2000000c

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000438 	.word	0x20000438

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000438 	.word	0x20000438

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffe0 	bl	80014e0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000010 	.word	0x20000010

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d008      	beq.n	8001780 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e020      	b.n	80017c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	2101      	movs	r1, #1
 80017aa:	fa01 f202 	lsl.w	r2, r1, r2
 80017ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d005      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e051      	b.n	8001894 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 020e 	bic.w	r2, r2, #14
 80017fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_DMA_Abort_IT+0xd4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d029      	beq.n	800186e <HAL_DMA_Abort_IT+0xa2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <HAL_DMA_Abort_IT+0xd8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d022      	beq.n	800186a <HAL_DMA_Abort_IT+0x9e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <HAL_DMA_Abort_IT+0xdc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01a      	beq.n	8001864 <HAL_DMA_Abort_IT+0x98>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <HAL_DMA_Abort_IT+0xe0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d012      	beq.n	800185e <HAL_DMA_Abort_IT+0x92>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_DMA_Abort_IT+0xe4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00a      	beq.n	8001858 <HAL_DMA_Abort_IT+0x8c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_DMA_Abort_IT+0xe8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <HAL_DMA_Abort_IT+0x86>
 800184c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001850:	e00e      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001856:	e00b      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	e008      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	e005      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 8001864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001868:	e002      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186a:	2310      	movs	r3, #16
 800186c:	e000      	b.n	8001870 <HAL_DMA_Abort_IT+0xa4>
 800186e:	2301      	movs	r3, #1
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_DMA_Abort_IT+0xec>)
 8001872:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    } 
  }
  return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020008 	.word	0x40020008
 80018a4:	4002001c 	.word	0x4002001c
 80018a8:	40020030 	.word	0x40020030
 80018ac:	40020044 	.word	0x40020044
 80018b0:	40020058 	.word	0x40020058
 80018b4:	4002006c 	.word	0x4002006c
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b08b      	sub	sp, #44	; 0x2c
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e169      	b.n	8001ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d0:	2201      	movs	r2, #1
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	f040 8158 	bne.w	8001b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a9a      	ldr	r2, [pc, #616]	; (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d05e      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 80018f8:	4a98      	ldr	r2, [pc, #608]	; (8001b5c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d875      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 80018fe:	4a98      	ldr	r2, [pc, #608]	; (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d058      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001904:	4a96      	ldr	r2, [pc, #600]	; (8001b60 <HAL_GPIO_Init+0x2a4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d86f      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800190a:	4a96      	ldr	r2, [pc, #600]	; (8001b64 <HAL_GPIO_Init+0x2a8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d052      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x2a8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d869      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	; (8001b68 <HAL_GPIO_Init+0x2ac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d04c      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x2ac>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d863      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	; (8001b6c <HAL_GPIO_Init+0x2b0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d046      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_GPIO_Init+0x2b0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d85d      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 800192e:	2b12      	cmp	r3, #18
 8001930:	d82a      	bhi.n	8001988 <HAL_GPIO_Init+0xcc>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d859      	bhi.n	80019ea <HAL_GPIO_Init+0x12e>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <HAL_GPIO_Init+0x80>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019b7 	.word	0x080019b7
 8001940:	08001991 	.word	0x08001991
 8001944:	080019a3 	.word	0x080019a3
 8001948:	080019e5 	.word	0x080019e5
 800194c:	080019eb 	.word	0x080019eb
 8001950:	080019eb 	.word	0x080019eb
 8001954:	080019eb 	.word	0x080019eb
 8001958:	080019eb 	.word	0x080019eb
 800195c:	080019eb 	.word	0x080019eb
 8001960:	080019eb 	.word	0x080019eb
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019eb 	.word	0x080019eb
 800196c:	080019eb 	.word	0x080019eb
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019eb 	.word	0x080019eb
 8001978:	080019eb 	.word	0x080019eb
 800197c:	080019eb 	.word	0x080019eb
 8001980:	08001999 	.word	0x08001999
 8001984:	080019ad 	.word	0x080019ad
 8001988:	4a79      	ldr	r2, [pc, #484]	; (8001b70 <HAL_GPIO_Init+0x2b4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800198e:	e02c      	b.n	80019ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e029      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	3304      	adds	r3, #4
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e024      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	3308      	adds	r3, #8
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e01f      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	330c      	adds	r3, #12
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e01a      	b.n	80019ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019be:	2304      	movs	r3, #4
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e013      	b.n	80019ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019cc:	2308      	movs	r3, #8
 80019ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	611a      	str	r2, [r3, #16]
          break;
 80019d6:	e009      	b.n	80019ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d8:	2308      	movs	r3, #8
 80019da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	615a      	str	r2, [r3, #20]
          break;
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x130>
          break;
 80019ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d801      	bhi.n	80019f6 <HAL_GPIO_Init+0x13a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_Init+0x13e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d802      	bhi.n	8001a08 <HAL_GPIO_Init+0x14c>
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x152>
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	210f      	movs	r1, #15
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	6a39      	ldr	r1, [r7, #32]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80b1 	beq.w	8001b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_GPIO_Init+0x2b8>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a40      	ldr	r2, [pc, #256]	; (8001b7c <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_GPIO_Init+0x2cc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d101      	bne.n	8001a9c <HAL_GPIO_Init+0x1e0>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1ee>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aba:	492f      	ldr	r1, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x2bc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d006      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	492c      	ldr	r1, [pc, #176]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4928      	ldr	r1, [pc, #160]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4922      	ldr	r1, [pc, #136]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	491e      	ldr	r1, [pc, #120]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4918      	ldr	r1, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4914      	ldr	r1, [pc, #80]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d021      	beq.n	8001b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_GPIO_Init+0x2d0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e021      	b.n	8001b9e <HAL_GPIO_Init+0x2e2>
 8001b5a:	bf00      	nop
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10220000 	.word	0x10220000
 8001b68:	10210000 	.word	0x10210000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4909      	ldr	r1, [pc, #36]	; (8001bc0 <HAL_GPIO_Init+0x304>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae8e 	bne.w	80018d0 <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	372c      	adds	r7, #44	; 0x2c
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43d9      	mvns	r1, r3
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	400b      	ands	r3, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e272      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c54:	4b8f      	ldr	r3, [pc, #572]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
 8001c60:	4b8c      	ldr	r3, [pc, #560]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x12c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d168      	bne.n	8001d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e24c      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x76>
 8001c90:	4b80      	ldr	r3, [pc, #512]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a7f      	ldr	r2, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
 8001cca:	4b72      	ldr	r3, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd4>
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a67      	ldr	r2, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fbec 	bl	80014e0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fbe8 	bl	80014e0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e200      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b5d      	ldr	r3, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe4>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fbd8 	bl	80014e0 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fbd4 	bl	80014e0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1ec      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x10c>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
 8001d7a:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1c0      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4939      	ldr	r1, [pc, #228]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e03a      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb8d 	bl	80014e0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fb89 	bl	80014e0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e1a1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
 8001dfc:	e015      	b.n	8001e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCC_OscConfig+0x270>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb6c 	bl	80014e0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb68 	bl	80014e0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e180      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d03a      	beq.n	8001eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d019      	beq.n	8001e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fb4c 	bl	80014e0 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fb48 	bl	80014e0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e160      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 face 	bl	800240c <RCC_Delay>
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_RCC_OscConfig+0x274>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7ff fb32 	bl	80014e0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e80:	f7ff fb2e 	bl	80014e0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d908      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e146      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	42420000 	.word	0x42420000
 8001e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b92      	ldr	r3, [pc, #584]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e9      	bne.n	8001e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a6 	beq.w	8002006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a87      	ldr	r2, [pc, #540]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b85      	ldr	r3, [pc, #532]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b82      	ldr	r3, [pc, #520]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7e      	ldr	r2, [pc, #504]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff faef 	bl	80014e0 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff faeb 	bl	80014e0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e103      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4c8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x312>
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a6e      	ldr	r2, [pc, #440]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e02d      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x334>
 8001f42:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6213      	str	r3, [r2, #32]
 8001f4e:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a66      	ldr	r2, [pc, #408]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x356>
 8001f64:	4b61      	ldr	r3, [pc, #388]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4a60      	ldr	r2, [pc, #384]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6213      	str	r3, [r2, #32]
 8001f70:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x36e>
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a5a      	ldr	r2, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa9f 	bl	80014e0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fa9b 	bl	80014e0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0b1      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x37e>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa89 	bl	80014e0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa85 	bl	80014e0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8087 	beq.w	800211e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d061      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d146      	bne.n	80020b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fa59 	bl	80014e0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fa55 	bl	80014e0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e06d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4921      	ldr	r1, [pc, #132]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a19      	ldr	r1, [r3, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	430b      	orrs	r3, r1
 800207e:	491b      	ldr	r1, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fa29 	bl	80014e0 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa25 	bl	80014e0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e03d      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x46a>
 80020b0:	e035      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa12 	bl	80014e0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fa0e 	bl	80014e0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e026      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x498>
 80020de:	e01e      	b.n	800211e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e019      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_OscConfig+0x500>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7ff f960 	bl	80014e0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7ff f95c 	bl	80014e0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f821 	bl	8002300 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	490a      	ldr	r1, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	fa22 f303 	lsr.w	r3, r2, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f8be 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003ac8 	.word	0x08003ac8
 80022f8:	20000008 	.word	0x20000008
 80022fc:	2000000c 	.word	0x2000000c

08002300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d002      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x30>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d003      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x36>
 800232e:	e027      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e027      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_GetSysClockFreq+0x94>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	0c5b      	lsrs	r3, r3, #17
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e004      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	613b      	str	r3, [r7, #16]
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	613b      	str	r3, [r7, #16]
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	693b      	ldr	r3, [r7, #16]
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	08003ae0 	.word	0x08003ae0
 80023a0:	08003af0 	.word	0x08003af0
 80023a4:	003d0900 	.word	0x003d0900

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	20000008 	.word	0x20000008

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff2 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08003ad8 	.word	0x08003ad8

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	0adb      	lsrs	r3, r3, #11
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4903      	ldr	r1, [pc, #12]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	08003ad8 	.word	0x08003ad8

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000008 	.word	0x20000008
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fec4 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fa74 	bl	8002974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e03a      	b.n	8002576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_TIM_Base_Start_IT+0x98>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d009      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_TIM_Base_Start_IT+0x9c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_TIM_Base_Start_IT+0xa0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b06      	cmp	r3, #6
 8002550:	d010      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	e007      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9b4 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9a7 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9b6 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f98a 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f97d 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f98c 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f960 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f953 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f962 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f936 	bl	800293c <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f929 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f938 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fb7e 	bl	8000e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa7b 	bl	8002c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8fc 	bl	8002960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0220 	mvn.w	r2, #32
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa46 	bl	8002c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_ConfigClockSource+0x1c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0b4      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x186>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d03e      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0xd4>
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	f200 8087 	bhi.w	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	f000 8086 	beq.w	800290e <HAL_TIM_ConfigClockSource+0x172>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	d87f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d01a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0xa6>
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d87b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d050      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d877      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d03c      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0xfa>
 800281c:	2b50      	cmp	r3, #80	; 0x50
 800281e:	d873      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d058      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d86f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d064      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800282c:	2b30      	cmp	r3, #48	; 0x30
 800282e:	d86b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d060      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d867      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d05a      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	e062      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002852:	f000 f968 	bl	8002b26 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	609a      	str	r2, [r3, #8]
      break;
 800286e:	e04f      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002880:	f000 f951 	bl	8002b26 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002892:	609a      	str	r2, [r3, #8]
      break;
 8002894:	e03c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 f8c8 	bl	8002a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2150      	movs	r1, #80	; 0x50
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f91f 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e02c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8e6 	bl	8002a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2160      	movs	r1, #96	; 0x60
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f90f 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e01c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f8a8 	bl	8002a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f8ff 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e00c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 f8f6 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 8002906:	e003      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
	...

08002974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <TIM_Base_SetConfig+0xb8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <TIM_Base_SetConfig+0xbc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a25      	ldr	r2, [pc, #148]	; (8002a34 <TIM_Base_SetConfig+0xc0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <TIM_Base_SetConfig+0xb8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d007      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <TIM_Base_SetConfig+0xbc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <TIM_Base_SetConfig+0xc0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <TIM_Base_SetConfig+0xb8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	615a      	str	r2, [r3, #20]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 030a 	bic.w	r3, r3, #10
 8002a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	621a      	str	r2, [r3, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f023 0210 	bic.w	r2, r3, #16
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	031b      	lsls	r3, r3, #12
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	621a      	str	r2, [r3, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f043 0307 	orr.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	021a      	lsls	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e046      	b.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d009      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800

08002c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e042      	b.n	8002cdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe faec 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fe57 	bl	800393c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d16d      	bne.n	8002de0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Transmit+0x2c>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e066      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d22:	f7fe fbdd 	bl	80014e0 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	88fa      	ldrh	r2, [r7, #6]
 8002d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	d108      	bne.n	8002d50 <HAL_UART_Transmit+0x6c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e003      	b.n	8002d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d58:	e02a      	b.n	8002db0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fba6 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e036      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1cf      	bne.n	8002d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2140      	movs	r1, #64	; 0x40
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fb76 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b08a      	sub	sp, #40	; 0x28
 8002dee:	af02      	add	r7, sp, #8
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d17c      	bne.n	8002f04 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_UART_Receive+0x2c>
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e075      	b.n	8002f06 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2222      	movs	r2, #34	; 0x22
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fb57 	bl	80014e0 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d108      	bne.n	8002e5c <HAL_UART_Receive+0x72>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e003      	b.n	8002e64 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e64:	e043      	b.n	8002eee <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2120      	movs	r1, #32
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb20 	bl	80034b6 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e042      	b.n	8002f06 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e01f      	b.n	8002ee0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d007      	beq.n	8002eba <HAL_UART_Receive+0xd0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_UART_Receive+0xde>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e008      	b.n	8002eda <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1b6      	bne.n	8002e66 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d112      	bne.n	8002f4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <HAL_UART_Receive_IT+0x26>
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e00b      	b.n	8002f50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb24 	bl	8003592 <UART_Start_Receive_IT>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	e000      	b.n	8002f50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0ba      	sub	sp, #232	; 0xe8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_UART_IRQHandler+0x66>
 8002faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fc01 	bl	80037be <UART_Receive_IT>
      return;
 8002fbc:	e25b      	b.n	8003476 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80de 	beq.w	8003184 <HAL_UART_IRQHandler+0x22c>
 8002fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80d1 	beq.w	8003184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_UART_IRQHandler+0xae>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_UART_IRQHandler+0xd2>
 8003012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0xf6>
 8003036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d011      	beq.n	800307e <HAL_UART_IRQHandler+0x126>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f043 0208 	orr.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 81f2 	beq.w	800346c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_UART_IRQHandler+0x14e>
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb8c 	bl	80037be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <HAL_UART_IRQHandler+0x17a>
 80030ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04f      	beq.n	8003172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa96 	bl	8003604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d041      	beq.n	800316a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800311e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800312a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1d9      	bne.n	80030e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d013      	beq.n	8003162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <HAL_UART_IRQHandler+0x3e0>)
 8003140:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe fb40 	bl	80017cc <HAL_DMA_Abort_IT>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800315c:	4610      	mov	r0, r2
 800315e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e00e      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f993 	bl	800348e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00a      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f98f 	bl	800348e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e006      	b.n	8003180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f98b 	bl	800348e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800317e:	e175      	b.n	800346c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003180:	bf00      	nop
    return;
 8003182:	e173      	b.n	800346c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	2b01      	cmp	r3, #1
 800318a:	f040 814f 	bne.w	800342c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8148 	beq.w	800342c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8141 	beq.w	800342c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80b6 	beq.w	800333c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8145 	beq.w	8003470 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ee:	429a      	cmp	r2, r3
 80031f0:	f080 813e 	bcs.w	8003470 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b20      	cmp	r3, #32
 8003204:	f000 8088 	beq.w	8003318 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800321e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003234:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003238:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800324c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1d9      	bne.n	8003208 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003278:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800327c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800328a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e1      	bne.n	8003254 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3314      	adds	r3, #20
 8003296:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329a:	e853 3f00 	ldrex	r3, [r3]
 800329e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e3      	bne.n	8003290 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e0:	e853 3f00 	ldrex	r3, [r3]
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e8:	f023 0310 	bic.w	r3, r3, #16
 80032ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80032fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e3      	bne.n	80032d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fa1f 	bl	8001756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003326:	b29b      	uxth	r3, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8b6 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003334:	e09c      	b.n	8003470 <HAL_UART_IRQHandler+0x518>
 8003336:	bf00      	nop
 8003338:	080036c9 	.word	0x080036c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003344:	b29b      	uxth	r3, r3
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 808e 	beq.w	8003474 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8089 	beq.w	8003474 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003386:	647a      	str	r2, [r7, #68]	; 0x44
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800338c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e3      	bne.n	8003362 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	623b      	str	r3, [r7, #32]
   return(result);
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033be:	633a      	str	r2, [r7, #48]	; 0x30
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003404:	61fa      	str	r2, [r7, #28]
 8003406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	617b      	str	r3, [r7, #20]
   return(result);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e3      	bne.n	80033e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f83b 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800342a:	e023      	b.n	8003474 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <HAL_UART_IRQHandler+0x4f4>
 8003438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f953 	bl	80036f0 <UART_Transmit_IT>
    return;
 800344a:	e014      	b.n	8003476 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <HAL_UART_IRQHandler+0x51e>
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f992 	bl	800378e <UART_EndTransmit_IT>
    return;
 800346a:	e004      	b.n	8003476 <HAL_UART_IRQHandler+0x51e>
    return;
 800346c:	bf00      	nop
 800346e:	e002      	b.n	8003476 <HAL_UART_IRQHandler+0x51e>
      return;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_UART_IRQHandler+0x51e>
      return;
 8003474:	bf00      	nop
  }
}
 8003476:	37e8      	adds	r7, #232	; 0xe8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b090      	sub	sp, #64	; 0x40
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c6:	e050      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d04c      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80034d6:	f7fe f803 	bl	80014e0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d241      	bcs.n	800356a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003506:	637a      	str	r2, [r7, #52]	; 0x34
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800350c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	613b      	str	r3, [r7, #16]
   return(result);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800353a:	623a      	str	r2, [r7, #32]
 800353c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	69f9      	ldr	r1, [r7, #28]
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	61bb      	str	r3, [r7, #24]
   return(result);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d09f      	beq.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3740      	adds	r7, #64	; 0x40
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	4613      	mov	r3, r2
 800359e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2222      	movs	r2, #34	; 0x22
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0220 	orr.w	r2, r2, #32
 80035f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b095      	sub	sp, #84	; 0x54
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362c:	643a      	str	r2, [r7, #64]	; 0x40
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3314      	adds	r3, #20
 8003646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	d119      	bne.n	80036b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	60bb      	str	r3, [r7, #8]
   return(result);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f023 0310 	bic.w	r3, r3, #16
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369c:	61ba      	str	r2, [r7, #24]
 800369e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6979      	ldr	r1, [r7, #20]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	613b      	str	r3, [r7, #16]
   return(result);
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036be:	bf00      	nop
 80036c0:	3754      	adds	r7, #84	; 0x54
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fed3 	bl	800348e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b21      	cmp	r3, #33	; 0x21
 8003702:	d13e      	bne.n	8003782 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370c:	d114      	bne.n	8003738 <UART_Transmit_IT+0x48>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d110      	bne.n	8003738 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]
 8003736:	e008      	b.n	800374a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6211      	str	r1, [r2, #32]
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4619      	mov	r1, r3
 8003758:	84d1      	strh	r1, [r2, #38]	; 0x26
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fe64 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08c      	sub	sp, #48	; 0x30
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	f040 80ae 	bne.w	8003930 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	d117      	bne.n	800380e <UART_Receive_IT+0x50>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d113      	bne.n	800380e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	1c9a      	adds	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
 800380c:	e026      	b.n	800385c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003814:	2300      	movs	r3, #0
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003820:	d007      	beq.n	8003832 <UART_Receive_IT+0x74>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <UART_Receive_IT+0x82>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e008      	b.n	8003852 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384c:	b2da      	uxtb	r2, r3
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4619      	mov	r1, r3
 800386a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800386c:	2b00      	cmp	r3, #0
 800386e:	d15d      	bne.n	800392c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0220 	bic.w	r2, r2, #32
 800387e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d135      	bne.n	8003922 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	613b      	str	r3, [r7, #16]
   return(result);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 0310 	bic.w	r3, r3, #16
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	623a      	str	r2, [r7, #32]
 80038de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d10a      	bne.n	8003914 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fdc0 	bl	80034a0 <HAL_UARTEx_RxEventCallback>
 8003920:	e002      	b.n	8003928 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fa8e 	bl	8000e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e002      	b.n	8003932 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3730      	adds	r7, #48	; 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003976:	f023 030c 	bic.w	r3, r3, #12
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	430b      	orrs	r3, r1
 8003982:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <UART_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d103      	bne.n	80039ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7fe fd1e 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	e002      	b.n	80039b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7fe fd06 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80039b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <UART_SetConfig+0x118>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	0119      	lsls	r1, r3, #4
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b1a      	ldr	r3, [pc, #104]	; (8003a54 <UART_SetConfig+0x118>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	4419      	add	r1, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <UART_SetConfig+0x118>)
 8003a22:	fba3 0302 	umull	r0, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	2064      	movs	r0, #100	; 0x64
 8003a2a:	fb00 f303 	mul.w	r3, r0, r3
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	3332      	adds	r3, #50	; 0x32
 8003a34:	4a07      	ldr	r2, [pc, #28]	; (8003a54 <UART_SetConfig+0x118>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	440a      	add	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40013800 	.word	0x40013800
 8003a54:	51eb851f 	.word	0x51eb851f

08003a58 <memset>:
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4402      	add	r2, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	4d0c      	ldr	r5, [pc, #48]	; (8003aa0 <__libc_init_array+0x38>)
 8003a6e:	4c0d      	ldr	r4, [pc, #52]	; (8003aa4 <__libc_init_array+0x3c>)
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	f000 f81a 	bl	8003ab0 <_init>
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	4d0a      	ldr	r5, [pc, #40]	; (8003aa8 <__libc_init_array+0x40>)
 8003a80:	4c0a      	ldr	r4, [pc, #40]	; (8003aac <__libc_init_array+0x44>)
 8003a82:	1b64      	subs	r4, r4, r5
 8003a84:	10a4      	asrs	r4, r4, #2
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08003af4 	.word	0x08003af4
 8003aa4:	08003af4 	.word	0x08003af4
 8003aa8:	08003af4 	.word	0x08003af4
 8003aac:	08003af8 	.word	0x08003af8

08003ab0 <_init>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

08003abc <_fini>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr
